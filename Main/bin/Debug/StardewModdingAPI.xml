<?xml version="1.0"?>
<doc>
    <assembly>
        <name>StardewModdingAPI</name>
    </assembly>
    <members>
        <member name="T:StardewModdingAPI.Framework.Content.ContentCache">
            <summary>A low-level wrapper around the content cache which handles reading, writing, and invalidating entries in the cache. This doesn't handle any higher-level logic like localisation, loading content, etc. It assumes all keys passed in are already normalised.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Content.ContentCache.Cache">
            <summary>The underlying asset cache.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Content.ContentCache.PossiblePathSeparators">
            <summary>The possible directory separator characters in an asset key.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Content.ContentCache.PreferredPathSeparator">
            <summary>The preferred directory separator chaeacter in an asset key.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Content.ContentCache.NormaliseAssetNameForPlatform">
            <summary>Applies platform-specific asset key normalisation so it's consistent with the underlying cache.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.ContentCache.Item(System.String)">
            <summary>Get or set the value of a raw cache entry.</summary>
            <param name="key">The cache key.</param>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.ContentCache.Keys">
            <summary>The current cache keys.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.ContentCache.#ctor(StardewValley.LocalizedContentManager,StardewModdingAPI.Framework.Reflection.Reflector,System.Char[],System.String)">
            <summary>Construct an instance.</summary>
            <param name="contentManager">The underlying content manager whose cache to manage.</param>
            <param name="reflection">Simplifies access to private game code.</param>
            <param name="possiblePathSeparators">The possible directory separator characters in an asset key.</param>
            <param name="preferredPathSeparator">The preferred directory separator chaeacter in an asset key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.ContentCache.ContainsKey(System.String)">
            <summary>Get whether the cache contains a given key.</summary>
            <param name="key">The cache key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.ContentCache.NormalisePathSeparators(System.String)">
            <summary>Normalise path separators in a file path. For asset keys, see <see cref="M:StardewModdingAPI.Framework.Content.ContentCache.NormaliseKey(System.String)"/> instead.</summary>
            <param name="path">The file path to normalise.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.ContentCache.NormaliseKey(System.String)">
            <summary>Normalise a cache key so it's consistent with the underlying cache.</summary>
            <param name="key">The asset key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.ContentCache.Remove(System.String,System.Boolean)">
            <summary>Remove an asset with the given key.</summary>
            <param name="key">The cache key.</param>
            <param name="dispose">Whether to dispose the entry value, if applicable.</param>
            <returns>Returns the removed key (if any).</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.ContentCache.Remove(System.Func{System.String,System.Type,System.Boolean},System.Boolean)">
            <summary>Purge matched assets from the cache.</summary>
            <param name="predicate">Matches the asset keys to invalidate.</param>
            <param name="dispose">Whether to dispose invalidated assets. This should only be <c>true</c> when they're being invalidated as part of a dispose, to avoid crashing the game.</param>
            <returns>Returns the removed keys (if any).</returns>
        </member>
        <member name="F:StardewModdingAPI.Framework.Content.AssetInfo.GetNormalisedPath">
            <summary>Normalises an asset key to match the cache key.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.AssetInfo.Locale">
            <summary>The content's locale code, if the content is localised.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.AssetInfo.AssetName">
            <summary>The normalised asset name being read. The format may change between platforms; see <see cref="M:StardewModdingAPI.Framework.Content.AssetInfo.AssetNameEquals(System.String)"/> to compare with a known path.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.AssetInfo.DataType">
            <summary>The content data type.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetInfo.#ctor(System.String,System.String,System.Type,System.Func{System.String,System.String})">
            <summary>Construct an instance.</summary>
            <param name="locale">The content's locale code, if the content is localised.</param>
            <param name="assetName">The normalised asset name being read.</param>
            <param name="type">The content type being read.</param>
            <param name="getNormalisedPath">Normalises an asset key to match the cache key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetInfo.AssetNameEquals(System.String)">
            <summary>Get whether the asset name being loaded matches a given name after normalisation.</summary>
            <param name="path">The expected asset path, relative to the game's content folder and without the .xnb extension or locale suffix (like 'Data\ObjectInformation').</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetInfo.GetFriendlyTypeName(System.Type)">
            <summary>Get a human-readable type name.</summary>
            <param name="type">The type to name.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Content.AssetData`1">
            <summary>Base implementation for a content helper which encapsulates access and changes to content being read from a data file.</summary>
            <typeparam name="TValue">The interface value type.</typeparam>
        </member>
        <member name="P:StardewModdingAPI.Framework.Content.AssetData`1.Data">
            <summary>The content data being read.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetData`1.#ctor(System.String,System.String,`0,System.Func{System.String,System.String})">
            <summary>Construct an instance.</summary>
            <param name="locale">The content's locale code, if the content is localised.</param>
            <param name="assetName">The normalised asset name being read.</param>
            <param name="data">The content data being read.</param>
            <param name="getNormalisedPath">Normalises an asset key to match the cache key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetData`1.ReplaceWith(`0)">
            <summary>Replace the entire content value with the given value. This is generally not recommended, since it may break compatibility with other mods or different versions of the game.</summary>
            <param name="value">The new content value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.InvalidCastException">The <paramref name="value"/>'s type is not compatible with the loaded asset's type.</exception>
        </member>
        <member name="T:StardewModdingAPI.Framework.Content.AssetDataForObject">
            <summary>Encapsulates access and changes to content being read from a data file.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForObject.#ctor(System.String,System.String,System.Object,System.Func{System.String,System.String})">
            <summary>Construct an instance.</summary>
            <param name="locale">The content's locale code, if the content is localised.</param>
            <param name="assetName">The normalised asset name being read.</param>
            <param name="data">The content data being read.</param>
            <param name="getNormalisedPath">Normalises an asset key to match the cache key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForObject.#ctor(StardewModdingAPI.IAssetInfo,System.Object,System.Func{System.String,System.String})">
            <summary>Construct an instance.</summary>
            <param name="info">The asset metadata.</param>
            <param name="data">The content data being read.</param>
            <param name="getNormalisedPath">Normalises an asset key to match the cache key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForObject.AsDictionary``2">
            <summary>Get a helper to manipulate the data as a dictionary.</summary>
            <typeparam name="TKey">The expected dictionary key.</typeparam>
            <typeparam name="TValue">The expected dictionary balue.</typeparam>
            <exception cref="T:System.InvalidOperationException">The content being read isn't a dictionary.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForObject.AsImage">
            <summary>Get a helper to manipulate the data as an image.</summary>
            <exception cref="T:System.InvalidOperationException">The content being read isn't an image.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForObject.GetData``1">
            <summary>Get the data as a given type.</summary>
            <typeparam name="TData">The expected data type.</typeparam>
            <exception cref="T:System.InvalidCastException">The data can't be converted to <typeparamref name="TData"/>.</exception>
        </member>
        <member name="T:StardewModdingAPI.Framework.Content.AssetDataForDictionary`2">
            <summary>Encapsulates access and changes to dictionary content being read from a data file.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForDictionary`2.#ctor(System.String,System.String,System.Collections.Generic.IDictionary{`0,`1},System.Func{System.String,System.String})">
            <summary>Construct an instance.</summary>
            <param name="locale">The content's locale code, if the content is localised.</param>
            <param name="assetName">The normalised asset name being read.</param>
            <param name="data">The content data being read.</param>
            <param name="getNormalisedPath">Normalises an asset key to match the cache key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForDictionary`2.Set(`0,`1)">
            <summary>Add or replace an entry in the dictionary.</summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForDictionary`2.Set(`0,System.Func{`1,`1})">
            <summary>Add or replace an entry in the dictionary.</summary>
            <param name="key">The entry key.</param>
            <param name="value">A callback which accepts the current value and returns the new value.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForDictionary`2.Set(System.Func{`0,`1,`1})">
            <summary>Dynamically replace values in the dictionary.</summary>
            <param name="replacer">A lambda which takes the current key and value for an entry, and returns the new value.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Content.AssetDataForImage">
            <summary>Encapsulates access and changes to dictionary content being read from a data file.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForImage.#ctor(System.String,System.String,Microsoft.Xna.Framework.Graphics.Texture2D,System.Func{System.String,System.String})">
            <summary>Construct an instance.</summary>
            <param name="locale">The content's locale code, if the content is localised.</param>
            <param name="assetName">The normalised asset name being read.</param>
            <param name="data">The content data being read.</param>
            <param name="getNormalisedPath">Normalises an asset key to match the cache key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Content.AssetDataForImage.PatchImage(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Rectangle},StardewModdingAPI.PatchMode)">
            <summary>Overwrite part of the image.</summary>
            <param name="source">The image to patch into the content.</param>
            <param name="sourceArea">The part of the <paramref name="source"/> to copy (or <c>null</c> to take the whole texture). This must be within the bounds of the <paramref name="source"/> texture.</param>
            <param name="targetArea">The part of the content to patch (or <c>null</c> to patch the whole texture). The original content within this area will be erased. This must be within the bounds of the existing spritesheet.</param>
            <param name="patchMode">Indicates how an image should be patched.</param>
            <exception cref="T:System.ArgumentNullException">One of the arguments is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetArea"/> is outside the bounds of the spritesheet.</exception>
        </member>
        <member name="T:StardewModdingAPI.Framework.Models.ModCompatibility">
            <summary>Specifies the compatibility of a given mod version range.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ModCompatibility.LowerVersion">
            <summary>The lowest version in the range, or <c>null</c> for all past versions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ModCompatibility.UpperVersion">
            <summary>The highest version in the range, or <c>null</c> for all future versions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ModCompatibility.Status">
            <summary>The mod compatibility.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ModCompatibility.ReasonPhrase">
            <summary>The reason phrase to show in log output, or <c>null</c> to use the default value.</summary>
            <example>For example, "this version is incompatible with the latest version of the game".</example>
        </member>
        <member name="M:StardewModdingAPI.Framework.Models.ModCompatibility.#ctor(System.String,StardewModdingAPI.Framework.Models.ModStatus,System.String)">
            <summary>Construct an instance.</summary>
            <param name="versionRange">A version range, which consists of two version strings separated by a '~' character. Either side can be left blank for an unbounded range.</param>
            <param name="status">The mod compatibility.</param>
            <param name="reasonPhrase">The reason phrase to show in log output, or <c>null</c> to use the default value.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Models.ModCompatibility.MatchesVersion(StardewModdingAPI.ISemanticVersion)">
            <summary>Get whether a given version is contained within this compatibility range.</summary>
            <param name="version">The version to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Models.ModDataID">
            <summary>Uniquely identifies a mod in SMAPI's internal data.</summary>
            <remarks>
            This represents a custom format which uniquely identifies a mod across all versions, even
            if its field values change or it doesn't specify a unique ID. This is mapped to a string
            with the following format:
            
            1. If the mod's identifier changed over time, multiple variants can be separated by the <c>|</c>
               character.
            2. Each variant can take one of two forms:
               - A simple string matching the mod's UniqueID value.
               - A JSON structure containing any of three manifest fields (ID, Name, and Author) to match.
            </remarks>
        </member>
        <member name="F:StardewModdingAPI.Framework.Models.ModDataID.Snapshots">
            <summary>The unique sets of field values which identify this mod.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Models.ModDataID.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Models.ModDataID.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="data">The mod identifier string (see remarks on <see cref="T:StardewModdingAPI.Framework.Models.ModDataID"/>).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Models.ModDataID.Matches(System.String,StardewModdingAPI.IManifest)">
            <summary>Get whether this ID matches a given mod manifest.</summary>
            <param name="id">The mod's unique ID, or a substitute ID if it isn't set in the manifest.</param>
            <param name="manifest">The manifest to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Models.ModDataID.FieldSnapshot">
            <summary>A unique set of fields which identifies the mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ModDataID.FieldSnapshot.ID">
            <summary>The unique mod ID.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ModDataID.FieldSnapshot.Name">
            <summary>The mod name, or <c>null</c> to ignore the mod name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ModDataID.FieldSnapshot.Author">
            <summary>The author name, or <c>null</c> to ignore the author.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Models.ManifestDependency">
            <summary>A mod dependency listed in a mod manifest.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ManifestDependency.UniqueID">
            <summary>The unique mod ID to require.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ManifestDependency.MinimumVersion">
            <summary>The minimum required version (if any).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ManifestDependency.IsRequired">
            <summary>Whether the dependency must be installed to use the mod.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Models.ManifestDependency.#ctor(System.String,System.String,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="uniqueID">The unique mod ID to require.</param>
            <param name="minimumVersion">The minimum required version (if any).</param>
            <param name="required">Whether the dependency must be installed to use the mod.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Models.ModStatus">
            <summary>Indicates how SMAPI should treat a mod.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Models.ModStatus.None">
            <summary>Don't override the status.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Models.ModStatus.Obsolete">
            <summary>The mod is obsolete and shouldn't be used, regardless of version.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Models.ModStatus.AssumeBroken">
            <summary>Assume the mod is not compatible, even if SMAPI doesn't detect any incompatible code.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Models.ModStatus.AssumeCompatible">
            <summary>Assume the mod is compatible, even if SMAPI detects incompatible code.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Models.SConfig">
            <summary>The SMAPI configuration settings.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.DeveloperMode">
            <summary>Whether to enable development features.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.CheckForUpdates">
            <summary>Whether to check for newer versions of SMAPI and mods on startup.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.GitHubProjectName">
            <summary>SMAPI's GitHub project name, used to perform update checks.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.WebApiBaseUrl">
            <summary>The base URL for SMAPI's web API, used to perform update checks.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.VerboseLogging">
            <summary>Whether SMAPI should log more information about the game context.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.SConfig.ModData">
            <summary>Extra metadata about mods.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Models.ModDataRecord">
            <summary>Metadata about a mod from SMAPI's internal data.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ModDataRecord.ID">
            <summary>The unique mod identifier.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ModDataRecord.UpdateKeys">
            <summary>A value to inject into <see cref="P:StardewModdingAPI.IManifest.UpdateKeys"/> field if it's not already set.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ModDataRecord.AlternativeUrl">
            <summary>The URL where the player can get an unofficial or alternative version of the mod if the official version isn't compatible.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ModDataRecord.Compatibility">
            <summary>The compatibility of given mod versions (if any).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ModDataRecord.MapLocalVersions">
            <summary>Map local versions to a semantic version for update checks.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.ModDataRecord.MapRemoteVersions">
            <summary>Map remote versions to a semantic version for update checks.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Models.ModDataRecord.GetCompatibility(StardewModdingAPI.ISemanticVersion)">
            <summary>Get the compatibility record for a given version, if any.</summary>
            <param name="version">The mod version to check.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Models.ModDataRecord.GetLocalVersionForUpdateChecks(System.String)">
            <summary>Get a semantic local version for update checks.</summary>
            <param name="version">The local version to normalise.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Models.ModDataRecord.GetRemoteVersionForUpdateChecks(System.String)">
            <summary>Get a semantic remote version for update checks.</summary>
            <param name="version">The remote version to normalise.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Models.Manifest">
            <summary>A manifest which describes a mod for SMAPI.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.Manifest.Name">
            <summary>The mod name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.Manifest.Description">
            <summary>A brief description of the mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.Manifest.Author">
            <summary>The mod author's name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.Manifest.Version">
            <summary>The mod version.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.Manifest.MinimumApiVersion">
            <summary>The minimum SMAPI version required by this mod, if any.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.Manifest.EntryDll">
            <summary>The name of the DLL in the directory that has the <see cref="M:StardewModdingAPI.IMod.Entry(StardewModdingAPI.IModHelper)"/> method.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.Manifest.Dependencies">
            <summary>The other mods that must be loaded before this mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.Manifest.UpdateKeys">
            <summary>The namespaced mod IDs to query for updates (like <c>Nexus:541</c>).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.Manifest.UniqueID">
            <summary>The unique mod ID.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Models.Manifest.ExtraFields">
            <summary>Any manifest fields which didn't match a valid field.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder">
            <summary>Finds incompatible CIL instructions that reference a given event.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.FullTypeName">
            <summary>The full type name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.EventName">
            <summary>The event name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.Result">
            <summary>The result to return for matching instructions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.#ctor(System.String,System.String,StardewModdingAPI.Framework.ModLoading.InstructionHandleResult)">
            <summary>Construct an instance.</summary>
            <param name="fullTypeName">The full type name for which to find references.</param>
            <param name="eventName">The event name for which to find references.</param>
            <param name="result">The result to return for matching instructions.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.EventFinder.IsMatch(Mono.Cecil.Cil.Instruction)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder">
            <summary>Finds incompatible CIL instructions that reference a given field.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.FullTypeName">
            <summary>The full type name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.FieldName">
            <summary>The field name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.Result">
            <summary>The result to return for matching instructions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.#ctor(System.String,System.String,StardewModdingAPI.Framework.ModLoading.InstructionHandleResult)">
            <summary>Construct an instance.</summary>
            <param name="fullTypeName">The full type name for which to find references.</param>
            <param name="fieldName">The field name for which to find references.</param>
            <param name="result">The result to return for matching instructions.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.FieldFinder.IsMatch(Mono.Cecil.Cil.Instruction)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder">
            <summary>Finds incompatible CIL instructions that reference a given method.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.FullTypeName">
            <summary>The full type name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.MethodName">
            <summary>The method name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.Result">
            <summary>The result to return for matching instructions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.#ctor(System.String,System.String,StardewModdingAPI.Framework.ModLoading.InstructionHandleResult)">
            <summary>Construct an instance.</summary>
            <param name="fullTypeName">The full type name for which to find references.</param>
            <param name="methodName">The method name for which to find references.</param>
            <param name="result">The result to return for matching instructions.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.MethodFinder.IsMatch(Mono.Cecil.Cil.Instruction)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder">
            <summary>Finds incompatible CIL instructions that reference a given property.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.FullTypeName">
            <summary>The full type name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.PropertyName">
            <summary>The property name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.Result">
            <summary>The result to return for matching instructions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.#ctor(System.String,System.String,StardewModdingAPI.Framework.ModLoading.InstructionHandleResult)">
            <summary>Construct an instance.</summary>
            <param name="fullTypeName">The full type name for which to find references.</param>
            <param name="propertyName">The property name for which to find references.</param>
            <param name="result">The result to return for matching instructions.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.PropertyFinder.IsMatch(Mono.Cecil.Cil.Instruction)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder">
            <summary>Finds incompatible CIL instructions that reference a given type.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.FullTypeName">
            <summary>The full type name for which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.Result">
            <summary>The result to return for matching instructions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.#ctor(System.String,StardewModdingAPI.Framework.ModLoading.InstructionHandleResult)">
            <summary>Construct an instance.</summary>
            <param name="fullTypeName">The full type name to match.</param>
            <param name="result">The result to return for matching instructions.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.IsMatch(Mono.Cecil.MethodDefinition)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="method">The method deifnition.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.IsMatch(Mono.Cecil.Cil.Instruction)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Finders.TypeFinder.IsMatch(Mono.Cecil.TypeReference)">
            <summary>Get whether a type reference matches the expected type.</summary>
            <param name="type">The type to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.IInstructionHandler">
            <summary>Performs predefined logic for detected CIL instructions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.IInstructionHandler.NounPhrase">
            <summary>A brief noun phrase indicating what the handler matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.IInstructionHandler.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.IInstructionHandler.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.IncompatibleInstructionException">
            <summary>An exception raised when an incompatible instruction is found while loading a mod assembly.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.IncompatibleInstructionException.NounPhrase">
            <summary>A brief noun phrase which describes the incompatible instruction that was found.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.IncompatibleInstructionException.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="nounPhrase">A brief noun phrase which describes the incompatible instruction that was found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.IncompatibleInstructionException.#ctor(System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="nounPhrase">A brief noun phrase which describes the incompatible instruction that was found.</param>
            <param name="message">A message which describes the error.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult">
            <summary>Indicates how an instruction was handled.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.None">
            <summary>No special handling is needed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.Rewritten">
            <summary>The instruction was successfully rewritten for compatibility.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.NotCompatible">
            <summary>The instruction is not compatible and can't be rewritten for compatibility.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.DetectedGamePatch">
            <summary>The instruction is compatible, but patches the game in a way that may impact stability.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.DetectedSaveSerialiser">
            <summary>The instruction is compatible, but affects the save serializer in a way that may make saves unloadable without the mod.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.InstructionHandleResult.DetectedDynamic">
            <summary>The instruction is compatible, but uses the <c>dynamic</c> keyword which won't work on Linux/Mac.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Platform">
            <summary>The game's platform version.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Platform.Mono">
            <summary>The Linux/Mac version of the game.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Platform.Windows">
            <summary>The Windows version of the game.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap">
            <summary>Metadata for mapping assemblies to the current <see cref="T:StardewModdingAPI.Framework.ModLoading.Platform"/>.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.TargetPlatform">
            <summary>The target game platform.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.RemoveNames">
            <summary>The short assembly names to remove as assembly reference, and replace with the <see cref="F:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.Targets"/>. These should be short names (like "Stardew Valley").</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.Targets">
            <summary>The assemblies to target. Equivalent types should be rewritten to use these assemblies.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.TargetReferences">
            <summary>An assembly => reference cache.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.TargetModules">
            <summary>An assembly => module cache.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap.#ctor(StardewModdingAPI.Framework.ModLoading.Platform,System.String[],System.Reflection.Assembly[])">
            <summary>Construct an instance.</summary>
            <param name="targetPlatform">The target game platform.</param>
            <param name="removeAssemblyNames">The assembly short names to remove (like <c>Stardew Valley</c>).</param>
            <param name="targetAssemblies">The assemblies to target.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.RewriteHelper">
            <summary>Provides helper methods for field rewriters.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.RewriteHelper.AsFieldReference(Mono.Cecil.Cil.Instruction)">
            <summary>Get the field reference from an instruction if it matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.RewriteHelper.AsMethodReference(Mono.Cecil.Cil.Instruction)">
            <summary>Get the method reference from an instruction if it matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.RewriteHelper.IsSameType(System.Type,Mono.Cecil.TypeReference)">
            <summary>Get whether a type matches a type reference.</summary>
            <param name="type">The defined type.</param>
            <param name="reference">The type reference.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.RewriteHelper.HasMatchingSignature(System.Reflection.MethodInfo,Mono.Cecil.MethodReference)">
            <summary>Get whether a method definition matches the signature expected by a method reference.</summary>
            <param name="definition">The method definition.</param>
            <param name="reference">The method reference.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.RewriteHelper.HasMatchingSignature(System.Type,Mono.Cecil.MethodReference)">
            <summary>Get whether a type has a method whose signature matches the one expected by a method reference.</summary>
            <param name="type">The type to check.</param>
            <param name="reference">The method reference.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldReplaceRewriter">
            <summary>Rewrites references to one field with another.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldReplaceRewriter.ToField">
            <summary>The new field to reference.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldReplaceRewriter.#ctor(System.Type,System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="type">The type whose field to which references should be rewritten.</param>
            <param name="fromFieldName">The field name to rewrite.</param>
            <param name="toFieldName">The new field name to reference.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldReplaceRewriter.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldToPropertyRewriter">
            <summary>Rewrites field references into property references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldToPropertyRewriter.Type">
            <summary>The type whose field to which references should be rewritten.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldToPropertyRewriter.FieldName">
            <summary>The field name to rewrite.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldToPropertyRewriter.#ctor(System.Type,System.String)">
            <summary>Construct an instance.</summary>
            <param name="type">The type whose field to which references should be rewritten.</param>
            <param name="fieldName">The field name to rewrite.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.FieldToPropertyRewriter.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Rewriters.VirtualEntryCallRemover">
            <summary>Rewrites virtual calls to the <see cref="M:StardewModdingAPI.Mod.Entry(StardewModdingAPI.IModHelper)"/> method.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.VirtualEntryCallRemover.ToType">
            <summary>The type containing the method.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.VirtualEntryCallRemover.MethodName">
            <summary>The name of the method.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Rewriters.VirtualEntryCallRemover.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.VirtualEntryCallRemover.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.VirtualEntryCallRemover.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.VirtualEntryCallRemover.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.VirtualEntryCallRemover.IsMatch(Mono.Cecil.Cil.Instruction)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="instruction">The IL instruction.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter">
            <summary>Rewrites method references from one parent type to another if the signatures match.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.FromType">
            <summary>The type whose methods to remap.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.ToType">
            <summary>The type with methods to map to.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.OnlyIfPlatformChanged">
            <summary>Whether to only rewrite references if loading the assembly on a different platform than it was compiled on.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.NounPhrase">
            <summary>A brief noun phrase indicating what the instruction finder matches.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.#ctor(System.Type,System.Type,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="fromType">The type whose methods to remap.</param>
            <param name="toType">The type with methods to map to.</param>
            <param name="onlyIfPlatformChanged">Whether to only rewrite references if loading the assembly on a different platform than it was compiled on.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.MethodParentRewriter.IsMatch(Mono.Cecil.Cil.Instruction,System.Boolean)">
            <summary>Get whether a CIL instruction matches.</summary>
            <param name="instruction">The IL instruction.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter">
            <summary>Rewrites all references to a type.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter.FromTypeName">
            <summary>The full type name to which to find references.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter.ToType">
            <summary>The new type to reference.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter.#ctor(System.String,System.Type)">
            <summary>Construct an instance.</summary>
            <param name="fromTypeFullName">The full type name to which to find references.</param>
            <param name="toType">The new type to reference.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.MethodDefinition,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for a method if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="method">The method definition containing the instruction.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter.Handle(Mono.Cecil.ModuleDefinition,Mono.Cecil.Cil.ILProcessor,Mono.Cecil.Cil.Instruction,StardewModdingAPI.Framework.ModLoading.PlatformAssemblyMap,System.Boolean)">
            <summary>Perform the predefined logic for an instruction if applicable.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="cil">The CIL processor.</param>
            <param name="instruction">The instruction to handle.</param>
            <param name="assemblyMap">Metadata for mapping assemblies to the current platform.</param>
            <param name="platformChanged">Whether the mod was compiled on a different platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.Rewriters.TypeReferenceRewriter.RewriteIfNeeded(Mono.Cecil.ModuleDefinition,Mono.Cecil.TypeReference)">
            <summary>Get the adjusted type reference if it matches, else the same value.</summary>
            <param name="module">The assembly module containing the instruction.</param>
            <param name="type">The type to replace if it matches.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.AssemblyLoadStatus">
            <summary>Indicates the result of an assembly load.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoadStatus.Okay">
            <summary>The assembly was loaded successfully.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoadStatus.Failed">
            <summary>The assembly could not be loaded.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoadStatus.AlreadyLoaded">
            <summary>The assembly is already loaded.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.InvalidModStateException">
            <summary>An exception which indicates that something went seriously wrong while loading mods, and SMAPI should abort outright.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.InvalidModStateException.#ctor(System.String,System.Exception)">
            <summary>Construct an instance.</summary>
            <param name="message">The error message.</param>
            <param name="ex">The underlying exception, if any.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.ModDependencyStatus">
            <summary>The status of a given mod in the dependency-sorting algorithm.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.ModDependencyStatus.Queued">
            <summary>The mod hasn't been visited yet.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.ModDependencyStatus.Checking">
            <summary>The mod is currently being analysed as part of a dependency chain.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.ModDependencyStatus.Sorted">
            <summary>The mod has already been sorted.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.ModDependencyStatus.Failed">
            <summary>The mod couldn't be sorted due to a metadata issue (e.g. missing dependencies).</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.ModMetadataStatus">
            <summary>Indicates the status of a mod's metadata resolution.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.ModMetadataStatus.Found">
            <summary>The mod has been found, but hasn't been processed yet.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.ModMetadataStatus.Failed">
            <summary>The mod cannot be loaded.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.ModResolver">
            <summary>Finds and processes mod metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModResolver.ReadManifests(System.String,StardewModdingAPI.Framework.Serialisation.JsonHelper,System.Collections.Generic.IEnumerable{StardewModdingAPI.Framework.Models.ModDataRecord})">
            <summary>Get manifest metadata for each folder in the given root path.</summary>
            <param name="rootPath">The root path to search for mods.</param>
            <param name="jsonHelper">The JSON helper with which to read manifests.</param>
            <param name="dataRecords">Metadata about mods from SMAPI's internal data.</param>
            <returns>Returns the manifests by relative folder.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModResolver.ValidateManifests(System.Collections.Generic.IEnumerable{StardewModdingAPI.Framework.IModMetadata},StardewModdingAPI.ISemanticVersion,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>Validate manifest metadata.</summary>
            <param name="mods">The mod manifests to validate.</param>
            <param name="apiVersion">The current SMAPI version.</param>
            <param name="vendorModUrls">Maps vendor keys (like <c>Nexus</c>) to their mod URL template (where <c>{0}</c> is the mod ID).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModResolver.ProcessDependencies(System.Collections.Generic.IEnumerable{StardewModdingAPI.Framework.IModMetadata})">
            <summary>Sort the given mods by the order they should be loaded.</summary>
            <param name="mods">The mods to process.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModResolver.ProcessDependencies(StardewModdingAPI.Framework.IModMetadata[],StardewModdingAPI.Framework.IModMetadata,System.Collections.Generic.IDictionary{StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.ModLoading.ModDependencyStatus},System.Collections.Generic.Stack{StardewModdingAPI.Framework.IModMetadata},System.Collections.Generic.ICollection{StardewModdingAPI.Framework.IModMetadata})">
            <summary>Sort a mod's dependencies by the order they should be loaded, and remove any mods that can't be loaded due to missing or conflicting dependencies.</summary>
            <param name="mods">The full list of mods being validated.</param>
            <param name="mod">The mod whose dependencies to process.</param>
            <param name="states">The dependency state for each mod.</param>
            <param name="sortedMods">The list in which to save mods sorted by dependency order.</param>
            <param name="currentChain">The current change of mod dependencies.</param>
            <returns>Returns the mod dependency status.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModResolver.GetModFolders(System.String)">
            <summary>Get all mod folders in a root folder, passing through empty folders as needed.</summary>
            <param name="rootPath">The root folder path to search.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver">
            <summary>A minimal assembly definition resolver which resolves references to known assemblies.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver.Loaded">
            <summary>The known assemblies.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver.Add(Mono.Cecil.AssemblyDefinition[])">
            <summary>Add known assemblies to the resolver.</summary>
            <param name="assemblies">The known assemblies.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver.Resolve(Mono.Cecil.AssemblyNameReference)">
            <summary>Resolve an assembly reference.</summary>
            <param name="name">The assembly name.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver.Resolve(Mono.Cecil.AssemblyNameReference,Mono.Cecil.ReaderParameters)">
            <summary>Resolve an assembly reference.</summary>
            <param name="name">The assembly name.</param>
            <param name="parameters">The assembly reader parameters.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver.Resolve(System.String)">
            <summary>Resolve an assembly reference.</summary>
            <param name="fullName">The assembly full name (including version, etc).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver.Resolve(System.String,Mono.Cecil.ReaderParameters)">
            <summary>Resolve an assembly reference.</summary>
            <param name="fullName">The assembly full name (including version, etc).</param>
            <param name="parameters">The assembly reader parameters.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyDefinitionResolver.ResolveName(System.String)">
            <summary>Resolve a known assembly definition based on its short or full name.</summary>
            <param name="name">The assembly's short or full name.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.AssemblyParseResult">
            <summary>Metadata about a parsed assembly definition.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyParseResult.File">
            <summary>The original assembly file.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyParseResult.Definition">
            <summary>The assembly definition.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyParseResult.Status">
            <summary>The result of the assembly load.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyParseResult.#ctor(System.IO.FileInfo,Mono.Cecil.AssemblyDefinition,StardewModdingAPI.Framework.ModLoading.AssemblyLoadStatus)">
            <summary>Construct an instance.</summary>
            <param name="file">The original assembly file.</param>
            <param name="assembly">The assembly definition.</param>
            <param name="status">The result of the assembly load.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.ModMetadata">
            <summary>Metadata for a mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.DisplayName">
            <summary>The mod's display name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.DirectoryPath">
            <summary>The mod's full directory path.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.Manifest">
            <summary>The mod manifest.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.DataRecord">
            <summary>Metadata about the mod from SMAPI's internal data (if any).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.Status">
            <summary>The metadata resolution status.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.Error">
            <summary>The reason the metadata is invalid, if any.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModLoading.ModMetadata.Mod">
            <summary>The mod instance (if it was loaded).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.#ctor(System.String,System.String,StardewModdingAPI.IManifest,StardewModdingAPI.Framework.Models.ModDataRecord)">
            <summary>Construct an instance.</summary>
            <param name="displayName">The mod's display name.</param>
            <param name="directoryPath">The mod's full directory path.</param>
            <param name="manifest">The mod manifest.</param>
            <param name="dataRecord">Metadata about the mod from SMAPI's internal data (if any).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.SetStatus(StardewModdingAPI.Framework.ModLoading.ModMetadataStatus,System.String)">
            <summary>Set the mod status.</summary>
            <param name="status">The metadata resolution status.</param>
            <param name="error">The reason the metadata is invalid, if any.</param>
            <returns>Return the instance for chaining.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.ModMetadata.SetMod(StardewModdingAPI.IMod)">
            <summary>Set the mod instance.</summary>
            <param name="mod">The mod instance to set.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModLoading.AssemblyLoader">
            <summary>Preprocesses and loads mod assemblies.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.AssemblyMap">
            <summary>Metadata for mapping assemblies to the current platform.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.TypeAssemblies">
            <summary>A type => assembly lookup for types which should be rewritten.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.Monitor">
            <summary>Encapsulates monitoring and logging.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.IsDeveloperMode">
            <summary>Whether to enable developer mode logging.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.#ctor(StardewModdingAPI.Framework.ModLoading.Platform,StardewModdingAPI.IMonitor,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="targetPlatform">The current game platform.</param>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="isDeveloperMode">Whether to enable developer mode logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.Load(StardewModdingAPI.Framework.IModMetadata,System.String,System.Boolean)">
            <summary>Preprocess and load an assembly.</summary>
            <param name="mod">The mod for which the assembly is being loaded.</param>
            <param name="assemblyPath">The assembly file path.</param>
            <param name="assumeCompatible">Assume the mod is compatible, even if incompatible code is detected.</param>
            <returns>Returns the rewrite metadata for the preprocessed assembly.</returns>
            <exception cref="T:StardewModdingAPI.Framework.ModLoading.IncompatibleInstructionException">An incompatible CIL instruction was found while rewriting the assembly.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.ResolveAssembly(System.String)">
            <summary>Resolve an assembly by its name.</summary>
            <param name="name">The assembly name.</param>
            <remarks>
            This implementation returns the first loaded assembly which matches the short form of
            the assembly name, to resolve assembly resolution issues when rewriting
            assemblies (especially with Mono). Since this is meant to be called on <see cref="E:System.AppDomain.AssemblyResolve"/>,
            the implicit assumption is that loading the exact assembly failed.
            </remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.GetReferencedLocalAssemblies(System.IO.FileInfo,System.Collections.Generic.HashSet{System.String},Mono.Cecil.IAssemblyResolver)">
            <summary>Get a list of referenced local assemblies starting from the mod assembly, ordered from leaf to root.</summary>
            <param name="file">The assembly file to load.</param>
            <param name="visitedAssemblyNames">The assembly names that should be skipped.</param>
            <param name="assemblyResolver">A resolver which resolves references to known assemblies.</param>
            <returns>Returns the rewrite metadata for the preprocessed assembly.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.RewriteAssembly(StardewModdingAPI.Framework.IModMetadata,Mono.Cecil.AssemblyDefinition,System.Boolean,System.Collections.Generic.HashSet{System.String},System.String)">
            <summary>Rewrite the types referenced by an assembly.</summary>
            <param name="mod">The mod for which the assembly is being loaded.</param>
            <param name="assembly">The assembly to rewrite.</param>
            <param name="assumeCompatible">Assume the mod is compatible, even if incompatible code is detected.</param>
            <param name="loggedMessages">The messages that have already been logged for this mod.</param>
            <param name="logPrefix">A string to prefix to log messages.</param>
            <returns>Returns whether the assembly was modified.</returns>
            <exception cref="T:StardewModdingAPI.Framework.ModLoading.IncompatibleInstructionException">An incompatible CIL instruction was found while rewriting the assembly.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.ProcessInstructionHandleResult(StardewModdingAPI.Framework.IModMetadata,StardewModdingAPI.Framework.ModLoading.IInstructionHandler,StardewModdingAPI.Framework.ModLoading.InstructionHandleResult,System.Collections.Generic.HashSet{System.String},System.String,System.Boolean,System.String)">
            <summary>Process the result from an instruction handler.</summary>
            <param name="mod">The mod being analysed.</param>
            <param name="handler">The instruction handler.</param>
            <param name="result">The result returned by the handler.</param>
            <param name="loggedMessages">The messages already logged for the current mod.</param>
            <param name="assumeCompatible">Assume the mod is compatible, even if incompatible code is detected.</param>
            <param name="logPrefix">A string to prefix to log messages.</param>
            <param name="filename">The assembly filename for log messages.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.ChangeTypeScope(Mono.Cecil.TypeReference)">
            <summary>Get the correct reference to use for compatibility with the current platform.</summary>
            <param name="type">The type reference to rewrite.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModLoading.AssemblyLoader.GetMethods(Mono.Cecil.ModuleDefinition)">
            <summary>Get all methods in a module.</summary>
            <param name="module">The module to search.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ContentManagerShim">
            <summary>A minimal content manager which defers to SMAPI's main content manager.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ContentManagerShim.ContentManager">
            <summary>SMAPI's underlying content manager.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ContentManagerShim.Name">
            <summary>The content manager's name for logs (if any).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagerShim.#ctor(StardewModdingAPI.Framework.SContentManager,System.String)">
            <summary>Construct an instance.</summary>
            <param name="contentManager">SMAPI's underlying content manager.</param>
            <param name="name">The content manager's name for logs (if any).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagerShim.Load``1(System.String)">
            <summary>Load an asset that has been processed by the content pipeline.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ContentManagerShim.Dispose(System.Boolean)">
            <summary>Dispose held resources.</summary>
            <param name="disposing">Whether the content manager is disposing (rather than finalising).</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Exceptions.SAssemblyLoadFailedException">
            <summary>An exception thrown when an assembly can't be loaded by SMAPI, with all the relevant details in the message.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Exceptions.SAssemblyLoadFailedException.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="message">The error message.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Exceptions.SContentLoadException">
            <summary>An implementation of <see cref="T:Microsoft.Xna.Framework.Content.ContentLoadException"/> used by SMAPI to detect whether it was thrown by SMAPI or the underlying framework.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Exceptions.SContentLoadException.#ctor(System.String,System.Exception)">
            <summary>Construct an instance.</summary>
            <param name="message">The error message.</param>
            <param name="ex">The underlying exception, if any.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Exceptions.SParseException">
            <summary>A format exception which provides a user-facing error message.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Exceptions.SParseException.#ctor(System.String,System.Exception)">
            <summary>Construct an instance.</summary>
            <param name="message">The error message.</param>
            <param name="ex">The underlying exception, if any.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Utilities.ContextHash`1">
            <summary>A <see cref="T:System.Collections.Generic.HashSet`1"/> wrapper meant for tracking recursive contexts.</summary>
            <typeparam name="T">The key type.</typeparam>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.ContextHash`1.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.ContextHash`1.#ctor(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>Construct an instance.</summary>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values in the set, or <c>null</c> to use the default comparer for the set type.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.ContextHash`1.Track(`0,System.Action)">
            <summary>Add a key while an action is in progress, and remove it when it completes.</summary>
            <param name="key">The key to add.</param>
            <param name="action">The action to perform.</param>
            <exception cref="T:System.InvalidOperationException">The specified key is already added.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.ContextHash`1.Track``1(`0,System.Func{``0})">
            <summary>Add a key while an action is in progress, and remove it when it completes.</summary>
            <typeparam name="TResult">The value type returned by the method.</typeparam>
            <param name="key">The key to add.</param>
            <param name="action">The action to perform.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Utilities.Countdown">
            <summary>Counts down from a baseline value.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Utilities.Countdown.Initial">
            <summary>The initial value from which to count down.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Utilities.Countdown.Current">
            <summary>The current value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.Countdown.#ctor(System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="initial">The initial value from which to count down.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.Countdown.Decrement">
            <summary>Reduce the current value by one.</summary>
            <returns>Returns whether the value was decremented (i.e. wasn't already zero).</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.Utilities.Countdown.Reset">
            <summary>Restart the countdown.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Command">
            <summary>A command that can be submitted through the SMAPI console to interact with SMAPI.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Command.ModName">
            <summary>The friendly name for the mod that registered the command.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Command.Name">
            <summary>The command name, which the user must type to trigger it.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Command.Documentation">
            <summary>The human-readable documentation shown when the player runs the built-in 'help' command.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Command.Callback">
            <summary>The method to invoke when the command is triggered. This method is passed the command name and arguments submitted by the user.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Command.#ctor(System.String,System.String,System.String,System.Action{System.String,System.String[]})">
            <summary>Construct an instance.</summary>
            <param name="modName">The friendly name for the mod that registered the command.</param>
            <param name="name">The command name, which the user must type to trigger it.</param>
            <param name="documentation">The human-readable documentation shown when the player runs the built-in 'help' command.</param>
            <param name="callback">The method to invoke when the command is triggered. This method is passed the command name and arguments submitted by the user.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.GameVersion">
            <summary>An implementation of <see cref="T:StardewModdingAPI.ISemanticVersion"/> that correctly handles the non-semantic versions used by older Stardew Valley releases.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.GameVersion.VersionMap">
            <summary>A mapping of game to semantic versions.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.GameVersion.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="version">The game version string.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.GameVersion.ToString">
            <summary>Get a string representation of the version.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.GameVersion.GetSemanticVersionString(System.String)">
            <summary>Convert a game version string to a semantic version string.</summary>
            <param name="gameVersion">The game version string.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.GameVersion.GetGameVersionString(System.String)">
            <summary>Convert a game version string to a semantic version string.</summary>
            <param name="gameVersion">The game version string.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.IModMetadata">
            <summary>Metadata for a mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.DisplayName">
            <summary>The mod's display name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.DirectoryPath">
            <summary>The mod's full directory path.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.Manifest">
            <summary>The mod manifest.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.DataRecord">
            <summary>>Metadata about the mod from SMAPI's internal data (if any).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.Status">
            <summary>The metadata resolution status.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.Error">
            <summary>The reason the metadata is invalid, if any.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.IModMetadata.Mod">
            <summary>The mod instance (if it was loaded).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.SetStatus(StardewModdingAPI.Framework.ModLoading.ModMetadataStatus,System.String)">
            <summary>Set the mod status.</summary>
            <param name="status">The metadata resolution status.</param>
            <param name="error">The reason the metadata is invalid, if any.</param>
            <returns>Return the instance for chaining.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.IModMetadata.SetMod(StardewModdingAPI.IMod)">
            <summary>Set the mod instance.</summary>
            <param name="mod">The mod instance to set.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.BaseHelper">
            <summary>The common base class for mod helpers.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.BaseHelper.ModID">
            <summary>The unique ID of the mod for which the helper was created.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.BaseHelper.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="modID">The unique ID of the relevant mod.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.CommandHelper">
            <summary>Provides an API for managing console commands.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.CommandHelper.ModName">
            <summary>The friendly mod name for this instance.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.CommandHelper.CommandManager">
            <summary>Manages console commands.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.CommandHelper.#ctor(System.String,System.String,StardewModdingAPI.Framework.CommandManager)">
            <summary>Construct an instance.</summary>
            <param name="modID">The unique ID of the relevant mod.</param>
            <param name="modName">The friendly mod name for this instance.</param>
            <param name="commandManager">Manages console commands.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.CommandHelper.Add(System.String,System.String,System.Action{System.String,System.String[]})">
            <summary>Add a console command.</summary>
            <param name="name">The command name, which the user must type to trigger it.</param>
            <param name="documentation">The human-readable documentation shown when the player runs the built-in 'help' command.</param>
            <param name="callback">The method to invoke when the command is triggered. This method is passed the command name and arguments submitted by the user.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> or <paramref name="callback"/> is null or empty.</exception>
            <exception cref="T:System.FormatException">The <paramref name="name"/> is not a valid format.</exception>
            <exception cref="T:System.ArgumentException">There's already a command with that name.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.CommandHelper.Trigger(System.String,System.String[])">
            <summary>Trigger a command.</summary>
            <param name="name">The command name.</param>
            <param name="arguments">The command arguments.</param>
            <returns>Returns whether a matching command was triggered.</returns>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.ContentHelper">
            <summary>Provides an API for loading content assets.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ContentHelper.ContentManager">
            <summary>SMAPI's underlying content manager.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ContentHelper.ModFolderPath">
            <summary>The absolute path to the mod folder.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ContentHelper.ModFolderPathFromContent">
            <summary>The path to the mod's folder, relative to the game's content folder (e.g. "../Mods/ModName").</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ContentHelper.ModName">
            <summary>The friendly mod name for use in errors.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ContentHelper.Monitor">
            <summary>Encapsulates monitoring and logging for a given module.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.CurrentLocale">
            <summary>The game's current locale code (like <c>pt-BR</c>).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.CurrentLocaleConstant">
            <summary>The game's current locale as an enum value.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.ObservableAssetEditors">
            <summary>The observable implementation of <see cref="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.AssetEditors"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.ObservableAssetLoaders">
            <summary>The observable implementation of <see cref="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.AssetLoaders"/>.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.AssetLoaders">
            <summary>Interceptors which provide the initial versions of matching content assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ContentHelper.AssetEditors">
            <summary>Interceptors which edit matching content assets after they're loaded.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.#ctor(StardewModdingAPI.Framework.SContentManager,System.String,System.String,System.String,StardewModdingAPI.IMonitor)">
            <summary>Construct an instance.</summary>
            <param name="contentManager">SMAPI's underlying content manager.</param>
            <param name="modFolderPath">The absolute path to the mod folder.</param>
            <param name="modID">The unique ID of the relevant mod.</param>
            <param name="modName">The friendly mod name for use in errors.</param>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.Load``1(System.String,StardewModdingAPI.ContentSource)">
            <summary>Load content from the game folder or mod folder (if not already cached), and return it. When loading a <c>.png</c> file, this must be called outside the game's draw loop.</summary>
            <typeparam name="T">The expected data type. The main supported types are <see cref="T:xTile.Map"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>, and dictionaries; other types may be supported by the game's content pipeline.</typeparam>
            <param name="key">The asset key to fetch (if the <paramref name="source"/> is <see cref="F:StardewModdingAPI.ContentSource.GameContent"/>), or the local path to a content file relative to the mod folder.</param>
            <param name="source">Where to search for a matching content asset.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
            <exception cref="T:Microsoft.Xna.Framework.Content.ContentLoadException">The content asset couldn't be loaded (e.g. because it doesn't exist).</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.GetActualAssetKey(System.String,StardewModdingAPI.ContentSource)">
            <summary>Get the underlying key in the game's content cache for an asset. This can be used to load custom map tilesheets, but should be avoided when you can use the content API instead. This does not validate whether the asset exists.</summary>
            <param name="key">The asset key to fetch (if the <paramref name="source"/> is <see cref="F:StardewModdingAPI.ContentSource.GameContent"/>), or the local path to a content file relative to the mod folder.</param>
            <param name="source">Where to search for a matching content asset.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.InvalidateCache(System.String)">
            <summary>Remove an asset from the content cache so it's reloaded on the next request. This will reload core game assets if needed, but references to the former asset will still show the previous content.</summary>
            <param name="key">The asset key to invalidate in the content folder.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
            <returns>Returns whether the given asset key was cached.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.InvalidateCache``1">
            <summary>Remove all assets of the given type from the cache so they're reloaded on the next request. <b>This can be a very expensive operation and should only be used in very specific cases.</b> This will reload core game assets if needed, but references to the former assets will still show the previous content.</summary>
            <typeparam name="T">The asset type to remove from the cache.</typeparam>
            <returns>Returns whether any assets were invalidated.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.InvalidateCache(System.Func{StardewModdingAPI.IAssetInfo,System.Boolean})">
            <summary>Remove matching assets from the content cache so they're reloaded on the next request. This will reload core game assets if needed, but references to the former asset will still show the previous content.</summary>
            <param name="predicate">A predicate matching the assets to invalidate.</param>
            <returns>Returns whether any cache entries were invalidated.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.AssertValidAssetKeyFormat(System.String)">
            <summary>Assert that the given key has a valid format.</summary>
            <param name="key">The asset key to check.</param>
            <exception cref="T:System.ArgumentException">The asset key is empty or contains invalid characters.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.FixCustomTilesheetPaths(xTile.Map,System.String)">
            <summary>Fix custom map tilesheet paths so they can be found by the content manager.</summary>
            <param name="map">The map whose tilesheets to fix.</param>
            <param name="mapKey">The map asset key within the mod folder.</param>
            <exception cref="T:Microsoft.Xna.Framework.Content.ContentLoadException">A map tilesheet couldn't be resolved.</exception>
            <remarks>
            The game's logic for tilesheets in <see cref="M:StardewValley.Game1.setGraphicsForSeason"/> is a bit specialised. It boils
            down to this:
             * If the location is indoors or the desert, or the image source contains 'path' or 'object', it's loaded
               as-is relative to the <c>Content</c> folder.
             * Else it's loaded from <c>Content\Maps</c> with a seasonal prefix.
            
            That logic doesn't work well in our case, mainly because we have no location metadata at this point.
            Instead we use a more heuristic approach: check relative to the map file first, then relative to
            <c>Content\Maps</c>, then <c>Content</c>. If the image source filename contains a seasonal prefix, try for a
            seasonal variation and then an exact match.
            
            While that doesn't exactly match the game logic, it's close enough that it's unlikely to make a difference.
            </remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.GetTilesheetAssetName(System.String,System.String)">
            <summary>Get the actual asset name for a tilesheet.</summary>
            <param name="modRelativeMapFolder">The folder path containing the map, relative to the mod folder.</param>
            <param name="imageSource">The tilesheet image source to load.</param>
            <returns>Returns the asset name.</returns>
            <remarks>See remarks on <see cref="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.FixCustomTilesheetPaths(xTile.Map,System.String)"/>.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.GetModFile(System.String)">
            <summary>Get a file from the mod folder.</summary>
            <param name="path">The asset path relative to the mod folder.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.GetContentFolderFile(System.String)">
            <summary>Get a file from the game's content folder.</summary>
            <param name="key">The asset key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ContentHelper.GetModAssetPath(System.String,System.String)">
            <summary>Get the asset path which loads a mod folder through a content manager.</summary>
            <param name="localPath">The file path relative to the mod's folder.</param>
            <param name="absolutePath">The absolute file path.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.ModHelper">
            <summary>Provides simplified APIs for writing mods.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ModHelper.JsonHelper">
            <summary>Encapsulates SMAPI's JSON file parsing.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.DirectoryPath">
            <summary>The full path to the mod's folder.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.Content">
            <summary>An API for loading content assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.Reflection">
            <summary>An API for accessing private game code.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.ModRegistry">
            <summary>an API for fetching metadata about loaded mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.ConsoleCommands">
            <summary>An API for managing console commands.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.ModHelper.Translation">
            <summary>An API for reading translations stored in the mod's <c>i18n</c> folder, with one file per locale (like <c>en.json</c>) containing a flat key => value structure. Translations are fetched with locale fallback, so missing translations are filled in from broader locales (like <c>pt-BR.json</c> &lt; <c>pt.json</c> &lt; <c>default.json</c>).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModHelper.#ctor(System.String,System.String,StardewModdingAPI.Framework.Serialisation.JsonHelper,StardewModdingAPI.IContentHelper,StardewModdingAPI.ICommandHelper,StardewModdingAPI.IModRegistry,StardewModdingAPI.IReflectionHelper,StardewModdingAPI.ITranslationHelper)">
            <summary>Construct an instance.</summary>
            <param name="modID">The mod's unique ID.</param>
            <param name="modDirectory">The full path to the mod's folder.</param>
            <param name="jsonHelper">Encapsulate SMAPI's JSON parsing.</param>
            <param name="contentHelper">An API for loading content assets.</param>
            <param name="commandHelper">An API for managing console commands.</param>
            <param name="modRegistry">an API for fetching metadata about loaded mods.</param>
            <param name="reflectionHelper">An API for accessing private game code.</param>
            <param name="translationHelper">An API for reading translations stored in the mod's <c>i18n</c> folder.</param>
            <exception cref="T:System.ArgumentNullException">An argument is null or empty.</exception>
            <exception cref="T:System.InvalidOperationException">The <paramref name="modDirectory"/> path does not exist on disk.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModHelper.ReadConfig``1">
            <summary>Read the mod's configuration file (and create it if needed).</summary>
            <typeparam name="TConfig">The config class type. This should be a plain class that has public properties for the settings you want. These can be complex types.</typeparam>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModHelper.WriteConfig``1(``0)">
            <summary>Save to the mod's configuration file.</summary>
            <typeparam name="TConfig">The config class type.</typeparam>
            <param name="config">The config settings to save.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModHelper.ReadJsonFile``1(System.String)">
            <summary>Read a JSON file.</summary>
            <typeparam name="TModel">The model type.</typeparam>
            <param name="path">The file path relative to the mod directory.</param>
            <returns>Returns the deserialised model, or <c>null</c> if the file doesn't exist or is empty.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModHelper.WriteJsonFile``1(System.String,``0)">
            <summary>Save to a JSON file.</summary>
            <typeparam name="TModel">The model type.</typeparam>
            <param name="path">The file path relative to the mod directory.</param>
            <param name="model">The model to save.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModHelper.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper">
            <summary>Provides metadata about installed mods.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.Registry">
            <summary>The underlying mod registry.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.#ctor(System.String,StardewModdingAPI.Framework.ModRegistry)">
            <summary>Construct an instance.</summary>
            <param name="modID">The unique ID of the relevant mod.</param>
            <param name="registry">The underlying mod registry.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.GetAll">
            <summary>Get metadata for all loaded mods.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.Get(System.String)">
            <summary>Get metadata for a loaded mod.</summary>
            <param name="uniqueID">The mod's unique ID.</param>
            <returns>Returns the matching mod's metadata, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ModRegistryHelper.IsLoaded(System.String)">
            <summary>Get whether a mod has been loaded.</summary>
            <param name="uniqueID">The mod's unique ID.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper">
            <summary>Provides helper methods for accessing private game code.</summary>
            <remarks>This implementation searches up the type hierarchy, and caches the reflected fields and methods with a sliding expiry (to optimise performance without unnecessary memory usage).</remarks>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.Reflector">
            <summary>The underlying reflection helper.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.ModName">
            <summary>The mod name for error messages.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.#ctor(System.String,System.String,StardewModdingAPI.Framework.Reflection.Reflector)">
            <summary>Construct an instance.</summary>
            <param name="modID">The unique ID of the relevant mod.</param>
            <param name="modName">The mod name for error messages.</param>
            <param name="reflector">The underlying reflection helper.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateField``1(System.Object,System.String,System.Boolean)">
            <summary>Get a private instance field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="obj">The object which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
            <returns>Returns the field wrapper, or <c>null</c> if the field doesn't exist and <paramref name="required"/> is <c>false</c>.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateField``1(System.Type,System.String,System.Boolean)">
            <summary>Get a private static field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="type">The type which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateProperty``1(System.Object,System.String,System.Boolean)">
            <summary>Get a private instance property.</summary>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="obj">The object which has the property.</param>
            <param name="name">The property name.</param>
            <param name="required">Whether to throw an exception if the private property is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateProperty``1(System.Type,System.String,System.Boolean)">
            <summary>Get a private static property.</summary>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="type">The type which has the property.</param>
            <param name="name">The property name.</param>
            <param name="required">Whether to throw an exception if the private property is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateValue``1(System.Object,System.String,System.Boolean)">
            <summary>Get the value of a private instance field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="obj">The object which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
            <returns>Returns the field value, or the default value for <typeparamref name="TValue"/> if the field wasn't found and <paramref name="required"/> is false.</returns>
            <remarks>
            This is a shortcut for <see cref="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateField``1(System.Object,System.String,System.Boolean)"/> followed by <see cref="M:StardewModdingAPI.IPrivateField`1.GetValue"/>.
            When <paramref name="required" /> is false, this will return the default value if reflection fails. If you need to check whether the field exists, use <see cref="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateField``1(System.Object,System.String,System.Boolean)" /> instead.
            </remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateValue``1(System.Type,System.String,System.Boolean)">
            <summary>Get the value of a private static field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="type">The type which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
            <returns>Returns the field value, or the default value for <typeparamref name="TValue"/> if the field wasn't found and <paramref name="required"/> is false.</returns>
            <remarks>
            This is a shortcut for <see cref="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateField``1(System.Type,System.String,System.Boolean)"/> followed by <see cref="M:StardewModdingAPI.IPrivateField`1.GetValue"/>.
            When <paramref name="required" /> is false, this will return the default value if reflection fails. If you need to check whether the field exists, use <see cref="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateField``1(System.Type,System.String,System.Boolean)" /> instead.
            </remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateMethod(System.Object,System.String,System.Boolean)">
            <summary>Get a private instance method.</summary>
            <param name="obj">The object which has the method.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateMethod(System.Type,System.String,System.Boolean)">
            <summary>Get a private static method.</summary>
            <param name="type">The type which has the method.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateMethod(System.Object,System.String,System.Type[],System.Boolean)">
            <summary>Get a private instance method.</summary>
            <param name="obj">The object which has the method.</param>
            <param name="name">The field name.</param>
            <param name="argumentTypes">The argument types of the method signature to find.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.GetPrivateMethod(System.Type,System.String,System.Type[],System.Boolean)">
            <summary>Get a private static method.</summary>
            <param name="type">The type which has the method.</param>
            <param name="name">The field name.</param>
            <param name="argumentTypes">The argument types of the method signature to find.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.AssertAccessAllowed``1(StardewModdingAPI.IPrivateField{``0})">
            <summary>Assert that mods can use the reflection helper to access the given member.</summary>
            <typeparam name="T">The field value type.</typeparam>
            <param name="field">The field being accessed.</param>
            <returns>Returns the same field instance for convenience.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.AssertAccessAllowed``1(StardewModdingAPI.IPrivateProperty{``0})">
            <summary>Assert that mods can use the reflection helper to access the given member.</summary>
            <typeparam name="T">The property value type.</typeparam>
            <param name="property">The property being accessed.</param>
            <returns>Returns the same property instance for convenience.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.AssertAccessAllowed(StardewModdingAPI.IPrivateMethod)">
            <summary>Assert that mods can use the reflection helper to access the given member.</summary>
            <param name="method">The method being accessed.</param>
            <returns>Returns the same method instance for convenience.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.ReflectionHelper.AssertAccessAllowed(System.Reflection.MemberInfo)">
            <summary>Assert that mods can use the reflection helper to access the given member.</summary>
            <param name="member">The member being accessed.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModHelpers.TranslationHelper">
            <summary>Provides translations stored in the mod's <c>i18n</c> folder, with one file per locale (like <c>en.json</c>) containing a flat key => value structure. Translations are fetched with locale fallback, so missing translations are filled in from broader locales (like <c>pt-BR.json</c> &lt; <c>pt.json</c> &lt; <c>default.json</c>).</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.ModName">
            <summary>The name of the relevant mod for error messages.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.All">
            <summary>The translations for each locale.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.ForLocale">
            <summary>The translations for the current locale, with locale fallback taken into account.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.Locale">
            <summary>The current locale.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.LocaleEnum">
            <summary>The game's current language code.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.#ctor(System.String,System.String,System.String,StardewValley.LocalizedContentManager.LanguageCode)">
            <summary>Construct an instance.</summary>
            <param name="modID">The unique ID of the relevant mod.</param>
            <param name="modName">The name of the relevant mod for error messages.</param>
            <param name="locale">The initial locale.</param>
            <param name="languageCode">The game's current language code.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.GetTranslations">
            <summary>Get all translations for the current locale.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.Get(System.String)">
            <summary>Get a translation for the current locale.</summary>
            <param name="key">The translation key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.Get(System.String,System.Object)">
            <summary>Get a translation for the current locale.</summary>
            <param name="key">The translation key.</param>
            <param name="tokens">An object containing token key/value pairs. This can be an anonymous object (like <c>new { value = 42, name = "Cranberries" }</c>), a dictionary, or a class instance.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.SetTranslations(System.Collections.Generic.IDictionary{System.String,System.Collections.Generic.IDictionary{System.String,System.String}})">
            <summary>Set the translations to use.</summary>
            <param name="translations">The translations to use.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.SetLocale(System.String,StardewValley.LocalizedContentManager.LanguageCode)">
            <summary>Set the current locale and precache translations.</summary>
            <param name="locale">The current locale.</param>
            <param name="localeEnum">The game's current language code.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModHelpers.TranslationHelper.GetRelevantLocales(System.String)">
            <summary>Get the locales which can provide translations for the given locale, in precedence order.</summary>
            <param name="locale">The locale for which to find valid locales.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.CommandManager">
            <summary>Manages console commands.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.CommandManager.Commands">
            <summary>The commands registered with SMAPI.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.CommandManager.Add(System.String,System.String,System.String,System.Action{System.String,System.String[]},System.Boolean)">
            <summary>Add a console command.</summary>
            <param name="modName">The friendly mod name for this instance.</param>
            <param name="name">The command name, which the user must type to trigger it.</param>
            <param name="documentation">The human-readable documentation shown when the player runs the built-in 'help' command.</param>
            <param name="callback">The method to invoke when the command is triggered. This method is passed the command name and arguments submitted by the user.</param>
            <param name="allowNullCallback">Whether to allow a null <paramref name="callback"/> argument; this should only used for backwards compatibility.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> or <paramref name="callback"/> is null or empty.</exception>
            <exception cref="T:System.FormatException">The <paramref name="name"/> is not a valid format.</exception>
            <exception cref="T:System.ArgumentException">There's already a command with that name.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.CommandManager.Get(System.String)">
            <summary>Get a command by its unique name.</summary>
            <param name="name">The command name.</param>
            <returns>Returns the matching command, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.CommandManager.GetAll">
            <summary>Get all registered commands.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.CommandManager.Trigger(System.String)">
            <summary>Trigger a command.</summary>
            <param name="input">The raw command input.</param>
            <returns>Returns whether a matching command was triggered.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.CommandManager.Trigger(System.String,System.String[])">
            <summary>Trigger a command.</summary>
            <param name="name">The command name.</param>
            <param name="arguments">The command arguments.</param>
            <returns>Returns whether a matching command was triggered.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.CommandManager.GetNormalisedName(System.String)">
            <summary>Get a normalised command name.</summary>
            <param name="name">The command name.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager">
            <summary>Manages console output interception.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager.Output">
            <summary>The intercepting console writer.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager.SupportsColor">
            <summary>Whether the current console supports color formatting.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager.OnMessageIntercepted">
            <summary>The event raised when a message is written to the console directly.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager.#ctor">
            <summary>Construct an instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager.ExclusiveWriteWithoutInterception(System.Action)">
            <summary>Get an exclusive lock and write to the console output without interception.</summary>
            <param name="action">The action to perform within the exclusive write block.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager.Dispose">
            <summary>Release all resources.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager.TestColorSupport">
            <summary>Test whether the current console supports color formatting.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Logging.InterceptingTextWriter">
            <summary>A text writer which allows intercepting output.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.Out">
            <summary>The underlying console output.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.Encoding">
            <summary>The character encoding in which the output is written.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.ShouldIntercept">
            <summary>Whether to intercept console output.</summary>
        </member>
        <member name="E:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.OnMessageIntercepted">
            <summary>The event raised when a message is written to the console directly.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.#ctor(System.IO.TextWriter)">
            <summary>Construct an instance.</summary>
            <param name="output">The underlying output writer.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.Write(System.Char[],System.Int32,System.Int32)">
            <summary>Writes a subarray of characters to the text string or stream.</summary>
            <param name="buffer">The character array to write data from.</param>
            <param name="index">The character position in the buffer at which to start retrieving data.</param>
            <param name="count">The number of characters to write.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.Write(System.Char)">
            <summary>Writes a character to the text string or stream.</summary>
            <param name="ch">The character to write to the text stream.</param>
            <remarks>Console log messages from the game should be caught by <see cref="M:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.Write(System.Char[],System.Int32,System.Int32)"/>. This method passes through anything that bypasses that method for some reason, since it's better to show it to users than hide it from everyone.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.InterceptingTextWriter.Dispose(System.Boolean)">
            <summary>Releases the unmanaged resources used by the <see cref="T:System.IO.TextWriter" /> and optionally releases the managed resources.</summary>
            <param name="disposing">true to release both managed and unmanaged resources; false to release only unmanaged resources.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Logging.LogFileManager">
            <summary>Manages reading and writing to log file.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Logging.LogFileManager.Stream">
            <summary>The underlying stream writer.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Logging.LogFileManager.Path">
            <summary>The full path to the log file being written.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.LogFileManager.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="path">The log file to write.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.LogFileManager.WriteLine(System.String)">
            <summary>Write a message to the log.</summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Logging.LogFileManager.Dispose">
            <summary>Release all resources.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Reflection.PrivateProperty`1">
            <summary>A private property obtained through reflection.</summary>
            <typeparam name="TValue">The property value type.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.PrivateProperty`1.DisplayName">
            <summary>The display name shown in error messages.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.PrivateProperty`1.GetterDelegate">
            <summary>The underlying property getter.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.PrivateProperty`1.SetterDelegate">
            <summary>The underlying property setter.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Reflection.PrivateProperty`1.PropertyInfo">
            <summary>The reflection metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.PrivateProperty`1.#ctor(System.Type,System.Object,System.Reflection.PropertyInfo,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="parentType">The type that has the field.</param>
            <param name="obj">The object that has the instance field (if applicable).</param>
            <param name="property">The reflection metadata.</param>
            <param name="isStatic">Whether the field is static.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parentType"/> or <paramref name="property"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="obj"/> is null for a non-static field, or not null for a static field.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.PrivateProperty`1.GetValue">
            <summary>Get the property value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.PrivateProperty`1.SetValue(`0)">
            <summary>Set the property value.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Reflection.CacheEntry">
            <summary>A cached member reflection result.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.CacheEntry.IsValid">
            <summary>Whether the lookup found a valid match.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.CacheEntry.MemberInfo">
            <summary>The reflection data for this member (or <c>null</c> if invalid).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.CacheEntry.#ctor(System.Boolean,System.Reflection.MemberInfo)">
            <summary>Construct an instance.</summary>
            <param name="isValid">Whether the lookup found a valid match.</param>
            <param name="memberInfo">The reflection data for this member (or <c>null</c> if invalid).</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Reflection.PrivateField`1">
            <summary>A private field obtained through reflection.</summary>
            <typeparam name="TValue">The field value type.</typeparam>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.PrivateField`1.ParentType">
            <summary>The type that has the field.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.PrivateField`1.Parent">
            <summary>The object that has the instance field (if applicable).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Reflection.PrivateField`1.DisplayName">
            <summary>The display name shown in error messages.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Reflection.PrivateField`1.FieldInfo">
            <summary>The reflection metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.PrivateField`1.#ctor(System.Type,System.Object,System.Reflection.FieldInfo,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="parentType">The type that has the field.</param>
            <param name="obj">The object that has the instance field (if applicable).</param>
            <param name="field">The reflection metadata.</param>
            <param name="isStatic">Whether the field is static.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parentType"/> or <paramref name="field"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="obj"/> is null for a non-static field, or not null for a static field.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.PrivateField`1.GetValue">
            <summary>Get the field value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.PrivateField`1.SetValue(`0)">
            <summary>Set the field value.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.Reflection.PrivateMethod">
            <summary>A private method obtained through reflection.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.PrivateMethod.ParentType">
            <summary>The type that has the method.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.PrivateMethod.Parent">
            <summary>The object that has the instance method (if applicable).</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Reflection.PrivateMethod.DisplayName">
            <summary>The display name shown in error messages.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Reflection.PrivateMethod.MethodInfo">
            <summary>The reflection metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.PrivateMethod.#ctor(System.Type,System.Object,System.Reflection.MethodInfo,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="parentType">The type that has the method.</param>
            <param name="obj">The object that has the instance method(if applicable).</param>
            <param name="method">The reflection metadata.</param>
            <param name="isStatic">Whether the field is static.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="parentType"/> or <paramref name="method"/> is null.</exception>
            <exception cref="T:System.ArgumentException">The <paramref name="obj"/> is null for a non-static method, or not null for a static method.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.PrivateMethod.Invoke``1(System.Object[])">
            <summary>Invoke the method.</summary>
            <typeparam name="TValue">The return type.</typeparam>
            <param name="arguments">The method arguments to pass in.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.PrivateMethod.Invoke(System.Object[])">
            <summary>Invoke the method.</summary>
            <param name="arguments">The method arguments to pass in.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Reflection.Reflector">
            <summary>Provides helper methods for accessing private game code.</summary>
            <remarks>This implementation searches up the type hierarchy, and caches the reflected fields and methods with a sliding expiry (to optimise performance without unnecessary memory usage).</remarks>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.Reflector.Cache">
            <summary>The cached fields and methods found via reflection.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Reflection.Reflector.SlidingCacheExpiry">
            <summary>The sliding cache expiration time.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetPrivateField``1(System.Object,System.String,System.Boolean)">
            <summary>Get a private instance field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="obj">The object which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
            <returns>Returns the field wrapper, or <c>null</c> if the field doesn't exist and <paramref name="required"/> is <c>false</c>.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetPrivateField``1(System.Type,System.String,System.Boolean)">
            <summary>Get a private static field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="type">The type which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetPrivateProperty``1(System.Object,System.String,System.Boolean)">
            <summary>Get a private instance property.</summary>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="obj">The object which has the property.</param>
            <param name="name">The property name.</param>
            <param name="required">Whether to throw an exception if the private property is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetPrivateProperty``1(System.Type,System.String,System.Boolean)">
            <summary>Get a private static property.</summary>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="type">The type which has the property.</param>
            <param name="name">The property name.</param>
            <param name="required">Whether to throw an exception if the private property is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetPrivateMethod(System.Object,System.String,System.Boolean)">
            <summary>Get a private instance method.</summary>
            <param name="obj">The object which has the method.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetPrivateMethod(System.Type,System.String,System.Boolean)">
            <summary>Get a private static method.</summary>
            <param name="type">The type which has the method.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetPrivateMethod(System.Object,System.String,System.Type[],System.Boolean)">
            <summary>Get a private instance method.</summary>
            <param name="obj">The object which has the method.</param>
            <param name="name">The field name.</param>
            <param name="argumentTypes">The argument types of the method signature to find.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetPrivateMethod(System.Type,System.String,System.Type[],System.Boolean)">
            <summary>Get a private static method.</summary>
            <param name="type">The type which has the method.</param>
            <param name="name">The field name.</param>
            <param name="argumentTypes">The argument types of the method signature to find.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetFieldFromHierarchy``1(System.Type,System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>Get a field from the type hierarchy.</summary>
            <typeparam name="TValue">The expected field type.</typeparam>
            <param name="type">The type which has the field.</param>
            <param name="obj">The object which has the field.</param>
            <param name="name">The field name.</param>
            <param name="bindingFlags">The reflection binding which flags which indicates what type of field to find.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetPropertyFromHierarchy``1(System.Type,System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>Get a property from the type hierarchy.</summary>
            <typeparam name="TValue">The expected property type.</typeparam>
            <param name="type">The type which has the property.</param>
            <param name="obj">The object which has the property.</param>
            <param name="name">The property name.</param>
            <param name="bindingFlags">The reflection binding which flags which indicates what type of property to find.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetMethodFromHierarchy(System.Type,System.Object,System.String,System.Reflection.BindingFlags)">
            <summary>Get a method from the type hierarchy.</summary>
            <param name="type">The type which has the method.</param>
            <param name="obj">The object which has the method.</param>
            <param name="name">The method name.</param>
            <param name="bindingFlags">The reflection binding which flags which indicates what type of method to find.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetMethodFromHierarchy(System.Type,System.Object,System.String,System.Reflection.BindingFlags,System.Type[])">
            <summary>Get a method from the type hierarchy.</summary>
            <param name="type">The type which has the method.</param>
            <param name="obj">The object which has the method.</param>
            <param name="name">The method name.</param>
            <param name="bindingFlags">The reflection binding which flags which indicates what type of method to find.</param>
            <param name="argumentTypes">The argument types of the method signature to find.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Reflection.Reflector.GetCached``1(System.String,System.Func{``0})">
            <summary>Get a method or field through the cache.</summary>
            <typeparam name="TMemberInfo">The expected <see cref="T:System.Reflection.MemberInfo"/> type.</typeparam>
            <param name="key">The cache key.</param>
            <param name="fetch">Fetches a new value to cache.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.RequestExitDelegate">
            <summary>A delegate which requests that SMAPI immediately exit the game. This should only be invoked when an irrecoverable fatal error happens that risks save corruption or game-breaking bugs.</summary>
            <param name="module">The module which requested an immediate exit.</param>
            <param name="reason">The reason provided for the shutdown.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.SContentManager">
            <summary>A thread-safe content manager which intercepts assets being loaded to let SMAPI mods inject or edit them.</summary>
            <remarks>
            This is the centralised content manager which manages all game assets. The game and mods don't use this class
            directly; instead they use one of several <see cref="T:StardewModdingAPI.Framework.ContentManagerShim"/> instances, which proxy requests to
            this class. That ensures that when the game disposes one content manager, the others can continue unaffected.
            That notably requires this class to be thread-safe, since the content managers can be disposed asynchronously.
            
            Note that assets in the cache have two identifiers: the asset name (like "bundles") and key (like "bundles.pt-BR").
            For English and non-translatable assets, these have the same value. The underlying cache only knows about asset
            keys, and the game and mods only know about asset names. The content manager handles resolving them.
            </remarks>
        </member>
        <member name="F:StardewModdingAPI.Framework.SContentManager.PreferredPathSeparator">
            <summary>The preferred directory separator chaeacter in an asset key.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SContentManager.Monitor">
            <summary>Encapsulates monitoring and logging.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SContentManager.Cache">
            <summary>The underlying asset cache.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SContentManager.GetKeyLocale">
            <summary>The private <see cref="T:StardewValley.LocalizedContentManager"/> method which generates the locale portion of an asset name.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SContentManager.KeyLocales">
            <summary>The language codes used in asset keys.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SContentManager.CoreAssets">
            <summary>Provides metadata for core game assets.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SContentManager.AssetsBeingLoaded">
            <summary>The assets currently being intercepted by <see cref="T:StardewModdingAPI.IAssetLoader"/> instances. This is used to prevent infinite loops when a loader loads a new asset.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SContentManager.ContentManagersByAssetKey">
            <summary>A lookup of the content managers which loaded each asset.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SContentManager.ModContentPrefix">
            <summary>The path prefix for assets in mod folders.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SContentManager.Lock">
            <summary>A lock used to prevents concurrent changes to the cache while data is being read.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SContentManager.Loaders">
            <summary>Interceptors which provide the initial versions of matching assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SContentManager.Editors">
            <summary>Interceptors which edit matching assets after they're loaded.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SContentManager.PossiblePathSeparators">
            <summary>The possible directory separator characters in an asset key.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SContentManager.FullRootDirectory">
            <summary>The absolute path to the <see cref="P:Microsoft.Xna.Framework.Content.ContentManager.RootDirectory"/>.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.#ctor(System.IServiceProvider,System.String,System.Globalization.CultureInfo,System.String,StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.Reflection.Reflector)">
            <summary>Construct an instance.</summary>
            <param name="serviceProvider">The service provider to use to locate services.</param>
            <param name="rootDirectory">The root directory to search for content.</param>
            <param name="currentCulture">The current culture for which to localise content.</param>
            <param name="languageCodeOverride">The current language code for which to localise content.</param>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="reflection">Simplifies access to private code.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.NormalisePathSeparators(System.String)">
            <summary>Normalise path separators in a file path. For asset keys, see <see cref="M:StardewModdingAPI.Framework.SContentManager.NormaliseAssetName(System.String)"/> instead.</summary>
            <param name="path">The file path to normalise.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.NormaliseAssetName(System.String)">
            <summary>Normalise an asset name so it's consistent with the underlying cache.</summary>
            <param name="assetName">The asset key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.AssertValidAssetKeyFormat(System.String)">
            <summary>Assert that the given key has a valid format.</summary>
            <param name="key">The asset key to check.</param>
            <exception cref="T:System.ArgumentException">The asset key is empty or contains invalid characters.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.GetRelativePath(System.String)">
            <summary>Get a directory path relative to the content root.</summary>
            <param name="targetPath">The target file path.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.GetLocale">
            <summary>Get the current content locale.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.IsLoaded(System.String)">
            <summary>Get whether the content manager has already loaded and cached the given asset.</summary>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.GetAssetKeys">
            <summary>Get the cached asset keys.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.Load``1(System.String)">
            <summary>Load an asset through the content pipeline. When loading a <c>.png</c> file, this must be called outside the game's draw loop.</summary>
            <typeparam name="T">The expected asset type.</typeparam>
            <param name="assetName">The asset path relative to the content directory.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.LoadFor``1(System.String,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>Load an asset through the content pipeline. When loading a <c>.png</c> file, this must be called outside the game's draw loop.</summary>
            <typeparam name="T">The expected asset type.</typeparam>
            <param name="assetName">The asset path relative to the content directory.</param>
            <param name="instance">The content manager instance for which to load the asset.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="assetName"/> is empty or contains invalid characters.</exception>
            <exception cref="T:Microsoft.Xna.Framework.Content.ContentLoadException">The content asset couldn't be loaded (e.g. because it doesn't exist).</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.Inject``1(System.String,``0,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>Inject an asset into the cache.</summary>
            <typeparam name="T">The type of asset to inject.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
            <param name="value">The asset value.</param>
            <param name="instance">The content manager instance for which to load the asset.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.InvalidateCacheFor(StardewModdingAPI.IAssetEditor[],StardewModdingAPI.IAssetLoader[])">
            <summary>Purge assets from the cache that match one of the interceptors.</summary>
            <param name="editors">The asset editors for which to purge matching assets.</param>
            <param name="loaders">The asset loaders for which to purge matching assets.</param>
            <returns>Returns whether any cache entries were invalidated.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.InvalidateCache(System.Func{StardewModdingAPI.IAssetInfo,System.Boolean},System.Boolean)">
            <summary>Purge matched assets from the cache.</summary>
            <param name="predicate">Matches the asset keys to invalidate.</param>
            <param name="dispose">Whether to dispose invalidated assets. This should only be <c>true</c> when they're being invalidated as part of a dispose, to avoid crashing the game.</param>
            <returns>Returns whether any cache entries were invalidated.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.InvalidateCache(System.Func{System.String,System.Type,System.Boolean},System.Boolean)">
            <summary>Purge matched assets from the cache.</summary>
            <param name="predicate">Matches the asset keys to invalidate.</param>
            <param name="dispose">Whether to dispose invalidated assets. This should only be <c>true</c> when they're being invalidated as part of a dispose, to avoid crashing the game.</param>
            <returns>Returns whether any cache entries were invalidated.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.DisposeFor(StardewModdingAPI.Framework.ContentManagerShim)">
            <summary>Dispose assets for the given content manager shim.</summary>
            <param name="shim">The content manager whose assets to dispose.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.Dispose(System.Boolean)">
            <summary>Dispose held resources.</summary>
            <param name="disposing">Whether the content manager is disposing (rather than finalising).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.GetKeyLocales(StardewModdingAPI.Framework.Reflection.Reflector)">
            <summary>Get the locale codes (like <c>ja-JP</c>) used in asset keys.</summary>
            <param name="reflection">Simplifies access to private game code.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.GetAssetName(System.String)">
            <summary>Get the asset name from a cache key.</summary>
            <param name="cacheKey">The input cache key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.ParseCacheKey(System.String,System.String@,System.String@)">
            <summary>Parse a cache key into its component parts.</summary>
            <param name="cacheKey">The input cache key.</param>
            <param name="assetName">The original asset name.</param>
            <param name="localeCode">The asset locale code (or <c>null</c> if not localised).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.IsNormalisedKeyLoaded(System.String)">
            <summary>Get whether an asset has already been loaded.</summary>
            <param name="normalisedAssetName">The normalised asset name.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.TrackAssetLoader(System.String,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>Track that a content manager loaded an asset.</summary>
            <param name="key">The asset key that was loaded.</param>
            <param name="manager">The content manager that loaded the asset.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.LoadImpl``1(System.String,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>Load an asset name without heuristics to support mod content.</summary>
            <typeparam name="T">The type of asset to load.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
            <param name="instance">The content manager instance for which to load the asset.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.InjectWithoutLock``1(System.String,``0,Microsoft.Xna.Framework.Content.ContentManager)">
            <summary>Inject an asset into the cache without acquiring a write lock. This should only be called from within a write lock.</summary>
            <typeparam name="T">The type of asset to inject.</typeparam>
            <param name="assetName">The asset path relative to the loader root directory, not including the <c>.xnb</c> extension.</param>
            <param name="value">The asset value.</param>
            <param name="instance">The content manager instance for which to load the asset.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.GetModFile(System.String)">
            <summary>Get a file from the mod folder.</summary>
            <param name="path">The asset path relative to the content folder.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.GetContentFolderFile(System.String)">
            <summary>Get a file from the game's content folder.</summary>
            <param name="key">The asset key.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.ApplyLoader``1(StardewModdingAPI.IAssetInfo)">
            <summary>Load the initial asset from the registered <see cref="P:StardewModdingAPI.Framework.SContentManager.Loaders"/>.</summary>
            <param name="info">The basic asset metadata.</param>
            <returns>Returns the loaded asset metadata, or <c>null</c> if no loader matched.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.ApplyEditors``1(StardewModdingAPI.IAssetInfo,StardewModdingAPI.IAssetData)">
            <summary>Apply any <see cref="P:StardewModdingAPI.Framework.SContentManager.Editors"/> to a loaded asset.</summary>
            <typeparam name="T">The asset type.</typeparam>
            <param name="info">The basic asset metadata.</param>
            <param name="asset">The loaded asset.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.GetInterceptors``1(System.Collections.Generic.IDictionary{StardewModdingAPI.Framework.IModMetadata,System.Collections.Generic.IList{``0}})">
            <summary>Get all registered interceptors from a list.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.PremultiplyTransparency(Microsoft.Xna.Framework.Graphics.Texture2D)">
            <summary>Premultiply a texture's alpha values to avoid transparency issues in the game. This is only possible if the game isn't currently drawing.</summary>
            <param name="texture">The texture to premultiply.</param>
            <returns>Returns a premultiplied texture.</returns>
            <remarks>Based on <a href="https://gist.github.com/Layoric/6255384">code by Layoric</a>.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.WithReadLock``1(System.Func{``0})">
            <summary>Acquire a read lock which prevents concurrent writes to the cache while it's open.</summary>
            <typeparam name="T">The action's return value.</typeparam>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.WithWriteLock(System.Action)">
            <summary>Acquire a write lock which prevents concurrent reads or writes to the cache while it's open.</summary>
            <param name="action">The action to perform.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SContentManager.WithWriteLock``1(System.Func{``0})">
            <summary>Acquire a write lock which prevents concurrent reads or writes to the cache while it's open.</summary>
            <typeparam name="T">The action's return value.</typeparam>
            <param name="action">The action to perform.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Serialisation.JsonHelper">
            <summary>Encapsulates SMAPI's JSON file parsing.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Serialisation.JsonHelper.JsonSettings">
            <summary>The JSON settings to use when serialising and deserialising files.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Serialisation.JsonHelper.ReadJsonFile``1(System.String)">
            <summary>Read a JSON file.</summary>
            <typeparam name="TModel">The model type.</typeparam>
            <param name="fullPath">The absolete file path.</param>
            <returns>Returns the deserialised model, or <c>null</c> if the file doesn't exist or is empty.</returns>
            <exception cref="T:System.InvalidOperationException">The given path is empty or invalid.</exception>
        </member>
        <member name="M:StardewModdingAPI.Framework.Serialisation.JsonHelper.WriteJsonFile``1(System.String,``0)">
            <summary>Save to a JSON file.</summary>
            <typeparam name="TModel">The model type.</typeparam>
            <param name="fullPath">The absolete file path.</param>
            <param name="model">The model to save.</param>
            <exception cref="T:System.InvalidOperationException">The given path is empty or invalid.</exception>
        </member>
        <member name="T:StardewModdingAPI.Framework.Serialisation.StringEnumConverter`1">
            <summary>A variant of <see cref="T:Newtonsoft.Json.Converters.StringEnumConverter"/> which only converts a specified enum.</summary>
            <typeparam name="T">The enum type.</typeparam>
        </member>
        <member name="M:StardewModdingAPI.Framework.Serialisation.StringEnumConverter`1.CanConvert(System.Type)">
            <summary>Get whether this instance can convert the specified object type.</summary>
            <param name="type">The object type.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Serialisation.SFieldConverter">
            <summary>Overrides how SMAPI reads and writes <see cref="T:StardewModdingAPI.ISemanticVersion"/> and <see cref="T:StardewModdingAPI.IManifestDependency"/> fields.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Serialisation.SFieldConverter.CanWrite">
            <summary>Whether this converter can write JSON.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Serialisation.SFieldConverter.CanConvert(System.Type)">
            <summary>Get whether this instance can convert the specified object type.</summary>
            <param name="objectType">The object type.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Serialisation.SFieldConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>Reads the JSON representation of the object.</summary>
            <param name="reader">The JSON reader.</param>
            <param name="objectType">The object type.</param>
            <param name="existingValue">The object being read.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Serialisation.SFieldConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <summary>Writes the JSON representation of the object.</summary>
            <param name="writer">The JSON writer.</param>
            <param name="value">The value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.DeprecationLevel">
            <summary>Indicates how deprecated something is.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.DeprecationLevel.Notice">
            <summary>It's deprecated but won't be removed soon. Mod authors have some time to update their mods. Deprecation warnings should be logged, but not written to the console.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.DeprecationLevel.Info">
            <summary>Mods should no longer be using it. Deprecation messages should be debug entries in the console.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.DeprecationLevel.PendingRemoval">
            <summary>The code will be removed soon. Deprecation messages should be warnings in the console.</summary>
        </member>
        <member name="T:StardewModdingAPI.Framework.DeprecationManager">
            <summary>Manages deprecation warnings.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.DeprecationManager.LoggedDeprecations">
            <summary>The deprecations which have already been logged (as 'mod name::noun phrase::version').</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.DeprecationManager.Monitor">
            <summary>Encapsulates monitoring and logging for a given module.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.DeprecationManager.ModRegistry">
            <summary>Tracks the installed mods.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.DeprecationManager.#ctor(StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.ModRegistry)">
            <summary>Construct an instance.</summary>
            <param name="monitor">Encapsulates monitoring and logging for a given module.</param>
            <param name="modRegistry">Tracks the installed mods.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.DeprecationManager.Warn(System.String,System.String,StardewModdingAPI.Framework.DeprecationLevel)">
            <summary>Log a deprecation warning.</summary>
            <param name="nounPhrase">A noun phrase describing what is deprecated.</param>
            <param name="version">The SMAPI version which deprecated it.</param>
            <param name="severity">How deprecated the code is.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.DeprecationManager.Warn(System.String,System.String,System.String,StardewModdingAPI.Framework.DeprecationLevel)">
            <summary>Log a deprecation warning.</summary>
            <param name="source">The friendly mod name which used the deprecated code.</param>
            <param name="nounPhrase">A noun phrase describing what is deprecated.</param>
            <param name="version">The SMAPI version which deprecated it.</param>
            <param name="severity">How deprecated the code is.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.DeprecationManager.MarkWarned(System.String,System.String)">
            <summary>Mark a deprecation warning as already logged.</summary>
            <param name="nounPhrase">A noun phrase describing what is deprecated (e.g. "the Extensions.AsInt32 method").</param>
            <param name="version">The SMAPI version which deprecated it.</param>
            <returns>Returns whether the deprecation was successfully marked as warned. Returns <c>false</c> if it was already marked.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.DeprecationManager.MarkWarned(System.String,System.String,System.String)">
            <summary>Mark a deprecation warning as already logged.</summary>
            <param name="source">The friendly name of the assembly which used the deprecated code.</param>
            <param name="nounPhrase">A noun phrase describing what is deprecated (e.g. "the Extensions.AsInt32 method").</param>
            <param name="version">The SMAPI version which deprecated it.</param>
            <returns>Returns whether the deprecation was successfully marked as warned. Returns <c>false</c> if it was already marked.</returns>
        </member>
        <member name="T:StardewModdingAPI.Framework.InternalExtensions">
            <summary>Provides extension methods for SMAPI's internal use.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.InternalExtensions.SafelyRaisePlainEvent(StardewModdingAPI.IMonitor,System.String,System.Collections.Generic.IEnumerable{System.Delegate},System.Object,System.EventArgs)">
            <summary>Safely raise an <see cref="T:System.EventHandler"/> event, and intercept any exceptions thrown by its handlers.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="name">The event name for error messages.</param>
            <param name="handlers">The event handlers.</param>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments (or <c>null</c> to pass <see cref="F:System.EventArgs.Empty"/>).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.InternalExtensions.SafelyRaiseGenericEvent``1(StardewModdingAPI.IMonitor,System.String,System.Collections.Generic.IEnumerable{System.Delegate},System.Object,``0)">
            <summary>Safely raise an <see cref="T:System.EventHandler`1"/> event, and intercept any exceptions thrown by its handlers.</summary>
            <typeparam name="TEventArgs">The event argument object type.</typeparam>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="name">The event name for error messages.</param>
            <param name="handlers">The event handlers.</param>
            <param name="sender">The event sender.</param>
            <param name="args">The event arguments.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.InternalExtensions.LogOnce(StardewModdingAPI.IMonitor,System.Collections.Generic.HashSet{System.String},System.String,StardewModdingAPI.LogLevel)">
            <summary>Log a message for the player or developer the first time it occurs.</summary>
            <param name="monitor">The monitor through which to log the message.</param>
            <param name="hash">The hash of logged messages.</param>
            <param name="message">The message to log.</param>
            <param name="level">The log severity level.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.InternalExtensions.GetLogSummary(System.Exception)">
            <summary>Get a string representation of an exception suitable for writing to the error log.</summary>
            <param name="exception">The error to summarise.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.InternalExtensions.IsOpen(Microsoft.Xna.Framework.Graphics.SpriteBatch,StardewModdingAPI.Framework.Reflection.Reflector)">
            <summary>Get whether the sprite batch is between a begin and end pair.</summary>
            <param name="spriteBatch">The sprite batch to check.</param>
            <param name="reflection">The reflection helper with which to access private fields.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.ModRegistry">
            <summary>Tracks the installed mods.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModRegistry.Mods">
            <summary>The registered mod data.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.ModRegistry.ModNamesByAssembly">
            <summary>The friendly mod names treated as deprecation warning sources (assembly full name => mod name).</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModRegistry.GetAll">
            <summary>Get metadata for all loaded mods.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModRegistry.Get(System.String)">
            <summary>Get metadata for a loaded mod.</summary>
            <param name="uniqueID">The mod's unique ID.</param>
            <returns>Returns the matching mod's metadata, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModRegistry.IsLoaded(System.String)">
            <summary>Get whether a mod has been loaded.</summary>
            <param name="uniqueID">The mod's unique ID.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModRegistry.Add(StardewModdingAPI.Framework.IModMetadata)">
            <summary>Register a mod as a possible source of deprecation warnings.</summary>
            <param name="metadata">The mod metadata.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModRegistry.GetMods">
            <summary>Get all enabled mods.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModRegistry.GetModFrom(System.Type)">
            <summary>Get the friendly mod name which defines a type.</summary>
            <param name="type">The type to check.</param>
            <returns>Returns the mod name, or <c>null</c> if the type isn't part of a known mod.</returns>
        </member>
        <member name="M:StardewModdingAPI.Framework.ModRegistry.GetModFromStack">
            <summary>Get the friendly name for the closest assembly registered as a source of deprecation warnings.</summary>
            <returns>Returns the source name, or <c>null</c> if no registered assemblies were found.</returns>
        </member>
        <member name="T:StardewModdingAPI.Framework.WebApiClient">
            <summary>Provides methods for interacting with the SMAPI web API.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.WebApiClient.BaseUrl">
            <summary>The base URL for the web API.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.WebApiClient.Version">
            <summary>The API version number.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.WebApiClient.#ctor(System.String,StardewModdingAPI.ISemanticVersion)">
            <summary>Construct an instance.</summary>
            <param name="baseUrl">The base URL for the web API.</param>
            <param name="version">The web API version.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.WebApiClient.GetModInfo(System.String[])">
            <summary>Get the latest SMAPI version.</summary>
            <param name="modKeys">The mod keys for which to fetch the latest version.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.WebApiClient.Post``2(System.String,``0)">
            <summary>Fetch the response from the backend API.</summary>
            <typeparam name="TBody">The body content type.</typeparam>
            <typeparam name="TResult">The expected response type.</typeparam>
            <param name="url">The request URL, optionally excluding the base URL.</param>
            <param name="content">The body content to post.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.Monitor">
            <summary>Encapsulates monitoring and logic for a given module.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Monitor.Source">
            <summary>The name of the module which logs messages using this instance.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Monitor.ConsoleManager">
            <summary>Manages access to the console output.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Monitor.LogFile">
            <summary>The log file to which to write messages.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Monitor.MaxLevelLength">
            <summary>The maximum length of the <see cref="T:StardewModdingAPI.LogLevel"/> values.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Monitor.Colors">
            <summary>The console text color for each log level.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.Monitor.ExitTokenSource">
            <summary>Propagates notification that SMAPI should exit.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Monitor.IsExiting">
            <summary>Whether SMAPI is aborting. Mods don't need to worry about this unless they have background tasks.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Monitor.ShowFullStampInConsole">
            <summary>Whether to show the full log stamps (with time/level/logger) in the console. If false, shows a simplified stamp with only the logger.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Monitor.ShowTraceInConsole">
            <summary>Whether to show trace messages in the console.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Monitor.WriteToConsole">
            <summary>Whether to write anything to the console. This should be disabled if no console is available.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.Monitor.WriteToFile">
            <summary>Whether to write anything to the log file. This should almost always be enabled.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.#ctor(System.String,StardewModdingAPI.Framework.Logging.ConsoleInterceptionManager,StardewModdingAPI.Framework.Logging.LogFileManager,System.Threading.CancellationTokenSource)">
            <summary>Construct an instance.</summary>
            <param name="source">The name of the module which logs messages using this instance.</param>
            <param name="consoleManager">Manages access to the console output.</param>
            <param name="logFile">The log file to which to write messages.</param>
            <param name="exitTokenSource">Propagates notification that SMAPI should exit.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.Log(System.String,StardewModdingAPI.LogLevel)">
            <summary>Log a message for the player or developer.</summary>
            <param name="message">The message to log.</param>
            <param name="level">The log severity level.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.ExitGameImmediately(System.String)">
            <summary>Immediately exit the game without saving. This should only be invoked when an irrecoverable fatal error happens that risks save corruption or game-breaking bugs.</summary>
            <param name="reason">The reason for the shutdown.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.Newline">
            <summary>Write a newline to the console and log file.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.LogFatal(System.String)">
            <summary>Log a fatal error message.</summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.LogImpl(System.String,System.String,StardewModdingAPI.LogLevel,System.ConsoleColor,System.Nullable{System.ConsoleColor})">
            <summary>Write a message line to the log.</summary>
            <param name="source">The name of the mod logging the message.</param>
            <param name="message">The message to log.</param>
            <param name="level">The log level.</param>
            <param name="color">The console foreground color.</param>
            <param name="background">The console background color (or <c>null</c> to leave it as-is).</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.GetConsoleColorScheme">
            <summary>Get the color scheme to use for the current console.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.Monitor.IsDark(System.ConsoleColor)">
            <summary>Get whether a console color should be considered dark, which is subjectively defined as 'white looks better than black on this text'.</summary>
            <param name="color">The color to check.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.SGame">
            <summary>SMAPI's extension of the game's core <see cref="T:StardewValley.Game1"/>, used to inject events.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.Monitor">
            <summary>Encapsulates monitoring and logging.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.DrawCrashTimer">
            <summary>The maximum number of consecutive attempts SMAPI should make to recover from a draw error.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.UpdateCrashTimer">
            <summary>The maximum number of consecutive attempts SMAPI should make to recover from an update error.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.AfterLoadTimer">
            <summary>The number of ticks until SMAPI should notify mods that the game has loaded.</summary>
            <remarks>Skipping a few frames ensures the game finishes initialising the world before mods try to change it.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.IsExitingToTitle">
            <summary>Whether the game is returning to the menu.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.IsBetweenSaveEvents">
            <summary>Whether the game is saving and SMAPI has already raised <see cref="E:StardewModdingAPI.Events.SaveEvents.BeforeSave"/>.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousPressedButtons">
            <summary>A record of the buttons pressed as of the previous tick.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousKeyState">
            <summary>A record of the keyboard state (i.e. the up/down state for each button) as of the previous tick.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousControllerState">
            <summary>A record of the controller state (i.e. the up/down state for each button) as of the previous tick.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousMouseState">
            <summary>A record of the mouse state (i.e. the cursor position, scroll amount, and the up/down state for each button) as of the previous tick.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousMousePosition">
            <summary>The previous mouse position on the screen adjusted for the zoom level.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousWindowSize">
            <summary>The window size value at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousSaveID">
            <summary>The save ID at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousGameLocations">
            <summary>A hash of <see cref="F:StardewValley.Game1.locations"/> at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousLocationObjects">
            <summary>A hash of the current location's <see cref="F:StardewValley.GameLocation.objects"/> at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousItems">
            <summary>The player's inventory at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousCombatLevel">
            <summary>The player's combat skill level at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousFarmingLevel">
            <summary>The player's farming skill level at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousFishingLevel">
            <summary>The player's fishing skill level at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousForagingLevel">
            <summary>The player's foraging skill level at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousMiningLevel">
            <summary>The player's mining skill level at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousLuckLevel">
            <summary>The player's luck skill level at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousGameLocation">
            <summary>The player's location at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousActiveMenu">
            <summary>The active game menu at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousMineLevel">
            <summary>The mine level at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousTime">
            <summary>The time of day (in 24-hour military format) at last check.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.PreviousLocale">
            <summary>The previous content locale.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.CurrentUpdateTick">
            <summary>An index incremented on every tick and reset every 60th tick (0–59).</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.FirstUpdate">
            <summary>Whether this is the very first update tick since the game started.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.Instance">
            <summary>The current game instance.</summary>
        </member>
        <member name="F:StardewModdingAPI.Framework.SGame.Reflection">
            <summary>Simplifies access to private game code.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGame._fpsList">
            <summary>Used to access private fields and methods.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGame.SContentManager">
            <summary>SMAPI's content manager.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.SGame.VerboseLogging">
            <summary>Whether SMAPI should log more information about the game context.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.#ctor(StardewModdingAPI.IMonitor,StardewModdingAPI.Framework.Reflection.Reflector)">
            <summary>Construct an instance.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="reflection">Simplifies access to private game code.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.CreateContentManager(System.IServiceProvider,System.String)">
            <summary>Constructor a content manager to read XNB files.</summary>
            <param name="serviceProvider">The service provider to use to locate services.</param>
            <param name="rootDirectory">The root directory to search for content.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.Update(Microsoft.Xna.Framework.GameTime)">
            <summary>The method called when the game is updating its state. This happens roughly 60 times per second.</summary>
            <param name="gameTime">A snapshot of the game timing state.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.Draw(Microsoft.Xna.Framework.GameTime)">
            <summary>The method called to draw everything to the screen.</summary>
            <param name="gameTime">A snapshot of the game timing state.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.DrawImpl(Microsoft.Xna.Framework.GameTime)">
            <summary>Replicate the game's draw logic with some changes for SMAPI.</summary>
            <param name="gameTime">A snapshot of the game timing state.</param>
            <remarks>This implementation is identical to <see cref="M:StardewValley.Game1.Draw(Microsoft.Xna.Framework.GameTime)"/>, except for try..catch around menu draw code, private field references replaced by wrappers, and added events.</remarks>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.CleanupAfterReturnToTitle">
            <summary>Perform any cleanup needed when the player unloads a save and returns to the title screen.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.GetPressedButtons(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.GamePadState)">
            <summary>Get the buttons pressed in the given stats.</summary>
            <param name="keyboard">The keyboard state.</param>
            <param name="mouse">The mouse state.</param>
            <param name="controller">The controller state.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.GetInventoryChanges(System.Collections.Generic.IEnumerable{StardewValley.Item},System.Collections.Generic.IDictionary{StardewValley.Item,System.Int32})">
            <summary>Get the player inventory changes between two states.</summary>
            <param name="current">The player's current inventory.</param>
            <param name="previous">The player's previous inventory.</param>
        </member>
        <member name="M:StardewModdingAPI.Framework.SGame.GetHash(System.Collections.IEnumerable)">
            <summary>Get a hash value for an enumeration.</summary>
            <param name="enumerable">The enumeration of items to hash.</param>
        </member>
        <member name="T:StardewModdingAPI.Framework.CursorPosition">
            <summary>Defines a position on a given map at different reference points.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.CursorPosition.ScreenPixels">
            <summary>The pixel position relative to the top-left corner of the visible screen.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.CursorPosition.Tile">
            <summary>The tile position under the cursor relative to the top-left corner of the map.</summary>
        </member>
        <member name="P:StardewModdingAPI.Framework.CursorPosition.GrabTile">
            <summary>The tile position that the game considers under the cursor for purposes of clicking actions. This may be different than <see cref="P:StardewModdingAPI.Framework.CursorPosition.Tile"/> if that's too far from the player.</summary>
        </member>
        <member name="M:StardewModdingAPI.Framework.CursorPosition.#ctor(Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2,Microsoft.Xna.Framework.Vector2)">
            <summary>Construct an instance.</summary>
            <param name="screenPixels">The pixel position relative to the top-left corner of the visible screen.</param>
            <param name="tile">The tile position relative to the top-left corner of the map.</param>
            <param name="grabTile">The tile position that the game considers under the cursor for purposes of clicking actions.</param>
        </member>
        <member name="T:StardewModdingAPI.Metadata.CoreAssets">
            <summary>Provides metadata about core assets in the game.</summary>
        </member>
        <member name="F:StardewModdingAPI.Metadata.CoreAssets.GetNormalisedPath">
            <summary>Normalises an asset key to match the cache key.</summary>
        </member>
        <member name="F:StardewModdingAPI.Metadata.CoreAssets.SingletonSetters">
            <summary>Setters which update static or singleton texture fields indexed by normalised asset key.</summary>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssets.#ctor(System.Func{System.String,System.String})">
            <summary>Initialise the core asset data.</summary>
            <param name="getNormalisedPath">Normalises an asset key to match the cache key.</param>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssets.ReloadForKey(StardewModdingAPI.Framework.SContentManager,System.String)">
            <summary>Reload one of the game's core assets (if applicable).</summary>
            <param name="content">The content manager through which to reload the asset.</param>
            <param name="key">The asset key to reload.</param>
            <returns>Returns whether an asset was reloaded.</returns>
        </member>
        <member name="M:StardewModdingAPI.Metadata.CoreAssets.GetAllBuildings">
            <summary>Get all player-constructed buildings in the world.</summary>
        </member>
        <member name="T:StardewModdingAPI.Metadata.InstructionMetadata">
            <summary>Provides CIL instruction handlers which rewrite mods for compatibility and throw exceptions for incompatible code.</summary>
        </member>
        <member name="M:StardewModdingAPI.Metadata.InstructionMetadata.GetHandlers">
            <summary>Get rewriters which detect or fix incompatible CIL instructions in mod assemblies.</summary>
        </member>
        <member name="T:StardewModdingAPI.ContentSource">
            <summary>Specifies a source containing content that can be loaded.</summary>
        </member>
        <member name="F:StardewModdingAPI.ContentSource.GameContent">
            <summary>Assets in the game's content manager (i.e. XNBs in the game's content folder).</summary>
        </member>
        <member name="F:StardewModdingAPI.ContentSource.ModFolder">
            <summary>XNB files in the current mod's folder.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.ContentEvents">
            <summary>Events raised when the game loads content.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.ContentEvents.AfterLocaleChanged">
            <summary>Raised after the content language changes.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.ContentEvents.InvokeAfterLocaleChanged(StardewModdingAPI.IMonitor,System.String,System.String)">
            <summary>Raise an <see cref="E:StardewModdingAPI.Events.ContentEvents.AfterLocaleChanged"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="oldLocale">The previous locale.</param>
            <param name="newLocale">The current locale.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsInput">
            <summary>Event arguments when a button is pressed or released.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsInput.Button">
            <summary>The button on the controller, keyboard, or mouse.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsInput.Cursor">
            <summary>The current cursor position.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsInput.IsClick">
            <summary>Whether the input is considered a 'click' by the game for enabling action.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsInput.IsActionButton">
            <summary>Whether the input should trigger actions on the affected tile.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsInput.IsUseToolButton">
            <summary>Whether the input should use tools on the affected tile.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsInput.#ctor(StardewModdingAPI.SButton,StardewModdingAPI.ICursorPosition,System.Boolean,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="button">The button on the controller, keyboard, or mouse.</param>
            <param name="cursor">The cursor position.</param>
            <param name="isActionButton">Whether the input should trigger actions on the affected tile.</param>
            <param name="isUseToolButton">Whether the input should use tools on the affected tile.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsInput.SuppressButton">
            <summary>Prevent the game from handling the vurrent button press. This doesn't prevent other mods from receiving the event.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsInput.SuppressButton(StardewModdingAPI.SButton)">
            <summary>Prevent the game from handling a button press. This doesn't prevent other mods from receiving the event.</summary>
            <param name="button">The button to suppress.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsValueChanged`1">
            <summary>Event arguments for a field that changed value.</summary>
            <typeparam name="T">The value type.</typeparam>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsValueChanged`1.PriorValue">
            <summary>The previous value.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsValueChanged`1.NewValue">
            <summary>The current value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsValueChanged`1.#ctor(`0,`0)">
            <summary>Construct an instance.</summary>
            <param name="priorValue">The previous value.</param>
            <param name="newValue">The current value.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.InputEvents">
            <summary>Events raised when the player uses a controller, keyboard, or mouse button.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.InputEvents.ButtonPressed">
            <summary>Raised when the player presses a button on the keyboard, controller, or mouse.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.InputEvents.ButtonReleased">
            <summary>Raised when the player releases a keyboard key on the keyboard, controller, or mouse.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.InputEvents.InvokeButtonPressed(StardewModdingAPI.IMonitor,StardewModdingAPI.SButton,StardewModdingAPI.ICursorPosition,System.Boolean,System.Boolean)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.InputEvents.ButtonPressed"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="button">The button on the controller, keyboard, or mouse.</param>
            <param name="cursor">The cursor position.</param>
            <param name="isActionButton">Whether the input should trigger actions on the affected tile.</param>
            <param name="isUseToolButton">Whether the input should use tools on the affected tile.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.InputEvents.InvokeButtonReleased(StardewModdingAPI.IMonitor,StardewModdingAPI.SButton,StardewModdingAPI.ICursorPosition,System.Boolean,System.Boolean)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.InputEvents.ButtonReleased"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="button">The button on the controller, keyboard, or mouse.</param>
            <param name="cursor">The cursor position.</param>
            <param name="isActionButton">Whether the input should trigger actions on the affected tile.</param>
            <param name="isUseToolButton">Whether the input should use tools on the affected tile.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.ControlEvents">
            <summary>Events raised when the player uses a controller, keyboard, or mouse.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.ControlEvents.KeyboardChanged">
            <summary>Raised when the <see cref="T:Microsoft.Xna.Framework.Input.KeyboardState"/> changes. That happens when the player presses or releases a key.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.ControlEvents.KeyPressed">
            <summary>Raised when the player presses a keyboard key.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.ControlEvents.KeyReleased">
            <summary>Raised when the player releases a keyboard key.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.ControlEvents.MouseChanged">
            <summary>Raised when the <see cref="T:Microsoft.Xna.Framework.Input.MouseState"/> changes. That happens when the player moves the mouse, scrolls the mouse wheel, or presses/releases a button.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.ControlEvents.ControllerButtonPressed">
            <summary>The player pressed a controller button. This event isn't raised for trigger buttons.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.ControlEvents.ControllerButtonReleased">
            <summary>The player released a controller button. This event isn't raised for trigger buttons.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.ControlEvents.ControllerTriggerPressed">
            <summary>The player pressed a controller trigger button.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.ControlEvents.ControllerTriggerReleased">
            <summary>The player released a controller trigger button.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.ControlEvents.InvokeKeyboardChanged(StardewModdingAPI.IMonitor,Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.KeyboardState)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.ControlEvents.KeyboardChanged"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="priorState">The previous keyboard state.</param>
            <param name="newState">The current keyboard state.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.ControlEvents.InvokeMouseChanged(StardewModdingAPI.IMonitor,Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.ControlEvents.MouseChanged"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="priorState">The previous mouse state.</param>
            <param name="newState">The current mouse state.</param>
            <param name="priorPosition">The previous mouse position on the screen adjusted for the zoom level.</param>
            <param name="newPosition">The current mouse position on the screen adjusted for the zoom level.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.ControlEvents.InvokeKeyPressed(StardewModdingAPI.IMonitor,Microsoft.Xna.Framework.Input.Keys)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.ControlEvents.KeyPressed"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="key">The keyboard button that was pressed.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.ControlEvents.InvokeKeyReleased(StardewModdingAPI.IMonitor,Microsoft.Xna.Framework.Input.Keys)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.ControlEvents.KeyReleased"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="key">The keyboard button that was released.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.ControlEvents.InvokeButtonPressed(StardewModdingAPI.IMonitor,Microsoft.Xna.Framework.Input.Buttons)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.ControlEvents.ControllerButtonPressed"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="button">The controller button that was pressed.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.ControlEvents.InvokeButtonReleased(StardewModdingAPI.IMonitor,Microsoft.Xna.Framework.Input.Buttons)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.ControlEvents.ControllerButtonReleased"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="button">The controller button that was released.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.ControlEvents.InvokeTriggerPressed(StardewModdingAPI.IMonitor,Microsoft.Xna.Framework.Input.Buttons,System.Single)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.ControlEvents.ControllerTriggerPressed"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="button">The trigger button that was pressed.</param>
            <param name="value">The current trigger value.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.ControlEvents.InvokeTriggerReleased(StardewModdingAPI.IMonitor,Microsoft.Xna.Framework.Input.Buttons,System.Single)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.ControlEvents.ControllerTriggerReleased"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="button">The trigger button that was pressed.</param>
            <param name="value">The current trigger value.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsClickableMenuChanged">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.MenuEvents.MenuChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsClickableMenuChanged.NewMenu">
            <summary>The previous menu.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsClickableMenuChanged.PriorMenu">
            <summary>The current menu.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsClickableMenuChanged.#ctor(StardewValley.Menus.IClickableMenu,StardewValley.Menus.IClickableMenu)">
            <summary>Construct an instance.</summary>
            <param name="priorMenu">The previous menu.</param>
            <param name="newMenu">The current menu.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsClickableMenuClosed">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.MenuEvents.MenuClosed"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsClickableMenuClosed.PriorMenu">
            <summary>The menu that was closed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsClickableMenuClosed.#ctor(StardewValley.Menus.IClickableMenu)">
            <summary>Construct an instance.</summary>
            <param name="priorMenu">The menu that was closed.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsControllerButtonPressed">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.ControlEvents.ControllerButtonPressed"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsControllerButtonPressed.PlayerIndex">
            <summary>The player who pressed the button.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsControllerButtonPressed.ButtonPressed">
            <summary>The controller button that was pressed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsControllerButtonPressed.#ctor(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.Buttons)">
            <summary>Construct an instance.</summary>
            <param name="playerIndex">The player who pressed the button.</param>
            <param name="button">The controller button that was pressed.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsControllerButtonReleased">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.ControlEvents.ControllerButtonReleased"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsControllerButtonReleased.PlayerIndex">
            <summary>The player who pressed the button.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsControllerButtonReleased.ButtonReleased">
            <summary>The controller button that was pressed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsControllerButtonReleased.#ctor(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.Buttons)">
            <summary>Construct an instance.</summary>
            <param name="playerIndex">The player who pressed the button.</param>
            <param name="button">The controller button that was released.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsControllerTriggerPressed">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.ControlEvents.ControllerTriggerPressed"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsControllerTriggerPressed.PlayerIndex">
            <summary>The player who pressed the button.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsControllerTriggerPressed.ButtonPressed">
            <summary>The controller button that was pressed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsControllerTriggerPressed.Value">
            <summary>The current trigger value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsControllerTriggerPressed.#ctor(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.Buttons,System.Single)">
            <summary>Construct an instance.</summary>
            <param name="playerIndex">The player who pressed the trigger button.</param>
            <param name="button">The trigger button that was pressed.</param>
            <param name="value">The current trigger value.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsControllerTriggerReleased">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.ControlEvents.ControllerTriggerReleased"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsControllerTriggerReleased.PlayerIndex">
            <summary>The player who pressed the button.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsControllerTriggerReleased.ButtonReleased">
            <summary>The controller button that was released.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsControllerTriggerReleased.Value">
            <summary>The current trigger value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsControllerTriggerReleased.#ctor(Microsoft.Xna.Framework.PlayerIndex,Microsoft.Xna.Framework.Input.Buttons,System.Single)">
            <summary>Construct an instance.</summary>
            <param name="playerIndex">The player who pressed the trigger button.</param>
            <param name="button">The trigger button that was released.</param>
            <param name="value">The current trigger value.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsCurrentLocationChanged">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.LocationEvents.CurrentLocationChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsCurrentLocationChanged.NewLocation">
            <summary>The player's current location.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsCurrentLocationChanged.PriorLocation">
            <summary>The player's previous location.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsCurrentLocationChanged.#ctor(StardewValley.GameLocation,StardewValley.GameLocation)">
            <summary>Construct an instance.</summary>
            <param name="priorLocation">The player's previous location.</param>
            <param name="newLocation">The player's current location.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsGameLocationsChanged">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.LocationEvents.LocationsChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsGameLocationsChanged.NewLocations">
            <summary>The current list of game locations.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsGameLocationsChanged.#ctor(System.Collections.Generic.List{StardewValley.GameLocation})">
            <summary>Construct an instance.</summary>
            <param name="newLocations">The current list of game locations.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsIntChanged">
            <summary>Event arguments for an integer field that changed value.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsIntChanged.PriorInt">
            <summary>The previous value.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsIntChanged.NewInt">
            <summary>The current value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsIntChanged.#ctor(System.Int32,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="priorInt">The previous value.</param>
            <param name="newInt">The current value.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsInventoryChanged">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.PlayerEvents.InventoryChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsInventoryChanged.Inventory">
            <summary>The player's inventory.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsInventoryChanged.Added">
            <summary>The added items.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsInventoryChanged.Removed">
            <summary>The removed items.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsInventoryChanged.QuantityChanged">
            <summary>The items whose stack sizes changed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsInventoryChanged.#ctor(System.Collections.Generic.List{StardewValley.Item},System.Collections.Generic.List{StardewModdingAPI.Events.ItemStackChange})">
            <summary>Construct an instance.</summary>
            <param name="inventory">The player's inventory.</param>
            <param name="changedItems">The inventory changes.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsKeyboardStateChanged">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.ControlEvents.KeyboardChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsKeyboardStateChanged.NewState">
            <summary>The previous keyboard state.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsKeyboardStateChanged.PriorState">
            <summary>The current keyboard state.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsKeyboardStateChanged.#ctor(Microsoft.Xna.Framework.Input.KeyboardState,Microsoft.Xna.Framework.Input.KeyboardState)">
            <summary>Construct an instance.</summary>
            <param name="priorState">The previous keyboard state.</param>
            <param name="newState">The current keyboard state.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsKeyPressed">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.ControlEvents.KeyboardChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsKeyPressed.KeyPressed">
            <summary>The keyboard button that was pressed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsKeyPressed.#ctor(Microsoft.Xna.Framework.Input.Keys)">
            <summary>Construct an instance.</summary>
            <param name="key">The keyboard button that was pressed.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsLevelUp">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.PlayerEvents.LeveledUp"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsLevelUp.Type">
            <summary>The player skill that leveled up.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsLevelUp.NewLevel">
            <summary>The new skill level.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsLevelUp.LevelType">
            <summary>The player skill types.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.EventArgsLevelUp.LevelType.Combat">
            <summary>The combat skill.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.EventArgsLevelUp.LevelType.Farming">
            <summary>The farming skill.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.EventArgsLevelUp.LevelType.Fishing">
            <summary>The fishing skill.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.EventArgsLevelUp.LevelType.Foraging">
            <summary>The foraging skill.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.EventArgsLevelUp.LevelType.Mining">
            <summary>The mining skill.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.EventArgsLevelUp.LevelType.Luck">
            <summary>The luck skill.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsLevelUp.#ctor(StardewModdingAPI.Events.EventArgsLevelUp.LevelType,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="type">The player skill that leveled up.</param>
            <param name="newLevel">The new skill level.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsLocationObjectsChanged">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.LocationEvents.LocationObjectsChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsLocationObjectsChanged.NewObjects">
            <summary>The current list of objects in the current location.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsLocationObjectsChanged.#ctor(StardewValley.SerializableDictionary{Microsoft.Xna.Framework.Vector2,StardewValley.Object})">
            <summary>Construct an instance.</summary>
            <param name="newObjects">The current list of objects in the current location.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsMineLevelChanged">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.MineEvents.MineLevelChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsMineLevelChanged.PreviousMineLevel">
            <summary>The previous mine level.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsMineLevelChanged.CurrentMineLevel">
            <summary>The current mine level.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsMineLevelChanged.#ctor(System.Int32,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="previousMineLevel">The previous mine level.</param>
            <param name="currentMineLevel">The current mine level.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.EventArgsMouseStateChanged">
            <summary>Event arguments for a <see cref="E:StardewModdingAPI.Events.ControlEvents.MouseChanged"/> event.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsMouseStateChanged.PriorState">
            <summary>The previous mouse state.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsMouseStateChanged.NewState">
            <summary>The current mouse state.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsMouseStateChanged.PriorPosition">
            <summary>The previous mouse position on the screen adjusted for the zoom level.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.EventArgsMouseStateChanged.NewPosition">
            <summary>The current mouse position on the screen adjusted for the zoom level.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.EventArgsMouseStateChanged.#ctor(Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Input.MouseState,Microsoft.Xna.Framework.Point,Microsoft.Xna.Framework.Point)">
            <summary>Construct an instance.</summary>
            <param name="priorState">The previous mouse state.</param>
            <param name="newState">The current mouse state.</param>
            <param name="priorPosition">The previous mouse position on the screen adjusted for the zoom level.</param>
            <param name="newPosition">The current mouse position on the screen adjusted for the zoom level.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.GameEvents">
            <summary>Events raised when the game changes state.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.InitializeInternal">
            <summary>Raised during launch after configuring XNA or MonoGame. The game window hasn't been opened by this point. Called after <see cref="M:Microsoft.Xna.Framework.Game.Initialize"/>.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.UpdateTick">
            <summary>Raised when the game updates its state (≈60 times per second).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.SecondUpdateTick">
            <summary>Raised every other tick (≈30 times per second).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.FourthUpdateTick">
            <summary>Raised every fourth tick (≈15 times per second).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.EighthUpdateTick">
            <summary>Raised every eighth tick (≈8 times per second).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.QuarterSecondTick">
            <summary>Raised every 15th tick (≈4 times per second).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.HalfSecondTick">
            <summary>Raised every 30th tick (≈twice per second).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GameEvents.OneSecondTick">
            <summary>Raised every 60th tick (≈once per second).</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.GameEvents.InvokeInitialize(StardewModdingAPI.IMonitor)">
            <summary>Raise an <see cref="E:StardewModdingAPI.Events.GameEvents.InitializeInternal"/> event.</summary>
            <param name="monitor">Encapsulates logging and monitoring.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.GameEvents.InvokeUpdateTick(StardewModdingAPI.IMonitor)">
            <summary>Raise an <see cref="E:StardewModdingAPI.Events.GameEvents.UpdateTick"/> event.</summary>
            <param name="monitor">Encapsulates logging and monitoring.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.GameEvents.InvokeSecondUpdateTick(StardewModdingAPI.IMonitor)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.GameEvents.SecondUpdateTick"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.GameEvents.InvokeFourthUpdateTick(StardewModdingAPI.IMonitor)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.GameEvents.FourthUpdateTick"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.GameEvents.InvokeEighthUpdateTick(StardewModdingAPI.IMonitor)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.GameEvents.EighthUpdateTick"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.GameEvents.InvokeQuarterSecondTick(StardewModdingAPI.IMonitor)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.GameEvents.QuarterSecondTick"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.GameEvents.InvokeHalfSecondTick(StardewModdingAPI.IMonitor)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.GameEvents.HalfSecondTick"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.GameEvents.InvokeOneSecondTick(StardewModdingAPI.IMonitor)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.GameEvents.OneSecondTick"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.GraphicsEvents">
            <summary>Events raised during the game's draw loop, when the game is rendering content to the window.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.Resize">
            <summary>Raised after the game window is resized.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPreRenderEvent">
            <summary>Raised before drawing the world to the screen.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPostRenderEvent">
            <summary>Raised after drawing the world to the screen.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPreRenderHudEvent">
            <summary>Raised before drawing the HUD (item toolbar, clock, etc) to the screen. The HUD is available at this point, but not necessarily visible. (For example, the event is raised even if a menu is open.)</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPostRenderHudEvent">
            <summary>Raised after drawing the HUD (item toolbar, clock, etc) to the screen. The HUD is available at this point, but not necessarily visible. (For example, the event is raised even if a menu is open.)</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPreRenderGuiEvent">
            <summary>Raised before drawing a menu to the screen during a draw loop. This includes the game's internal menus like the title screen.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.GraphicsEvents.OnPostRenderGuiEvent">
            <summary>Raised after drawing a menu to the screen during a draw loop. This includes the game's internal menus like the title screen.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.GraphicsEvents.InvokeResize(StardewModdingAPI.IMonitor)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.GraphicsEvents.Resize"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.GraphicsEvents.InvokeOnPreRenderEvent(StardewModdingAPI.IMonitor)">
            <summary>Raise an <see cref="E:StardewModdingAPI.Events.GraphicsEvents.OnPreRenderEvent"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.GraphicsEvents.InvokeOnPostRenderEvent(StardewModdingAPI.IMonitor)">
            <summary>Raise an <see cref="E:StardewModdingAPI.Events.GraphicsEvents.OnPostRenderEvent"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.GraphicsEvents.HasPostRenderListeners">
            <summary>Get whether there are any post-render event listeners.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.GraphicsEvents.InvokeOnPreRenderGuiEvent(StardewModdingAPI.IMonitor)">
            <summary>Raise an <see cref="E:StardewModdingAPI.Events.GraphicsEvents.OnPreRenderGuiEvent"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.GraphicsEvents.InvokeOnPostRenderGuiEvent(StardewModdingAPI.IMonitor)">
            <summary>Raise an <see cref="E:StardewModdingAPI.Events.GraphicsEvents.OnPostRenderGuiEvent"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.GraphicsEvents.InvokeOnPreRenderHudEvent(StardewModdingAPI.IMonitor)">
            <summary>Raise an <see cref="E:StardewModdingAPI.Events.GraphicsEvents.OnPreRenderHudEvent"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.GraphicsEvents.InvokeOnPostRenderHudEvent(StardewModdingAPI.IMonitor)">
            <summary>Raise an <see cref="E:StardewModdingAPI.Events.GraphicsEvents.OnPostRenderHudEvent"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.LocationEvents">
            <summary>Events raised when the player transitions between game locations, a location is added or removed, or the objects in the current location change.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.LocationEvents.CurrentLocationChanged">
            <summary>Raised after the player warps to a new location.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.LocationEvents.LocationsChanged">
            <summary>Raised after a game location is added or removed.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.LocationEvents.LocationObjectsChanged">
            <summary>Raised after the list of objects in the current location changes (e.g. an object is added or removed).</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.LocationEvents.InvokeCurrentLocationChanged(StardewModdingAPI.IMonitor,StardewValley.GameLocation,StardewValley.GameLocation)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.LocationEvents.CurrentLocationChanged"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="priorLocation">The player's previous location.</param>
            <param name="newLocation">The player's current location.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.LocationEvents.InvokeLocationsChanged(StardewModdingAPI.IMonitor,System.Collections.Generic.List{StardewValley.GameLocation})">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.LocationEvents.LocationsChanged"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="newLocations">The current list of game locations.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.LocationEvents.InvokeOnNewLocationObject(StardewModdingAPI.IMonitor,StardewValley.SerializableDictionary{Microsoft.Xna.Framework.Vector2,StardewValley.Object})">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.LocationEvents.LocationObjectsChanged"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="newObjects">The current list of objects in the current location.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.MenuEvents">
            <summary>Events raised when a game menu is opened or closed (including internal menus like the title screen).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.MenuEvents.MenuChanged">
            <summary>Raised after a game menu is opened or replaced with another menu. This event is not invoked when a menu is closed.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.MenuEvents.MenuClosed">
            <summary>Raised after a game menu is closed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.MenuEvents.InvokeMenuChanged(StardewModdingAPI.IMonitor,StardewValley.Menus.IClickableMenu,StardewValley.Menus.IClickableMenu)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.MenuEvents.MenuChanged"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="priorMenu">The previous menu.</param>
            <param name="newMenu">The current menu.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.MenuEvents.InvokeMenuClosed(StardewModdingAPI.IMonitor,StardewValley.Menus.IClickableMenu)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.MenuEvents.MenuClosed"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="priorMenu">The menu that was closed.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.MineEvents">
            <summary>Events raised when something happens in the mines.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.MineEvents.MineLevelChanged">
            <summary>Raised after the player warps to a new level of the mine.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.MineEvents.InvokeMineLevelChanged(StardewModdingAPI.IMonitor,System.Int32,System.Int32)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.MineEvents.MineLevelChanged"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="previousMineLevel">The previous mine level.</param>
            <param name="currentMineLevel">The current mine level.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.PlayerEvents">
            <summary>Events raised when the player data changes.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.PlayerEvents.InventoryChanged">
            <summary>Raised after the player's inventory changes in any way (added or removed item, sorted, etc).</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.PlayerEvents.LeveledUp">
            <summary> Raised after the player levels up a skill. This happens as soon as they level up, not when the game notifies the player after their character goes to bed.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.PlayerEvents.InvokeInventoryChanged(StardewModdingAPI.IMonitor,System.Collections.Generic.List{StardewValley.Item},System.Collections.Generic.IEnumerable{StardewModdingAPI.Events.ItemStackChange})">
            <summary>Raise an <see cref="E:StardewModdingAPI.Events.PlayerEvents.InventoryChanged"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="inventory">The player's inventory.</param>
            <param name="changedItems">The inventory changes.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.PlayerEvents.InvokeLeveledUp(StardewModdingAPI.IMonitor,StardewModdingAPI.Events.EventArgsLevelUp.LevelType,System.Int32)">
            <summary>Rase a <see cref="E:StardewModdingAPI.Events.PlayerEvents.LeveledUp"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="type">The player skill that leveled up.</param>
            <param name="newLevel">The new skill level.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.SaveEvents">
            <summary>Events raised before and after the player saves/loads the game.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.SaveEvents.BeforeSave">
            <summary>Raised before the game begins writes data to the save file.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.SaveEvents.AfterSave">
            <summary>Raised after the game finishes writing data to the save file.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.SaveEvents.AfterLoad">
            <summary>Raised after the player loads a save slot.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.SaveEvents.AfterReturnToTitle">
            <summary>Raised after the game returns to the title screen.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.SaveEvents.InvokeBeforeSave(StardewModdingAPI.IMonitor)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.SaveEvents.BeforeSave"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.SaveEvents.InvokeAfterSave(StardewModdingAPI.IMonitor)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.SaveEvents.AfterSave"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.SaveEvents.InvokeAfterLoad(StardewModdingAPI.IMonitor)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.SaveEvents.AfterLoad"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.SaveEvents.InvokeAfterReturnToTitle(StardewModdingAPI.IMonitor)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.SaveEvents.AfterReturnToTitle"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="T:StardewModdingAPI.Events.TimeEvents">
            <summary>Events raised when the in-game date or time changes.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.TimeEvents.AfterDayStarted">
            <summary>Raised after the game begins a new day, including when loading a save.</summary>
        </member>
        <member name="E:StardewModdingAPI.Events.TimeEvents.TimeOfDayChanged">
            <summary>Raised after the in-game clock changes.</summary>
        </member>
        <member name="M:StardewModdingAPI.Events.TimeEvents.InvokeAfterDayStarted(StardewModdingAPI.IMonitor)">
            <summary>Raise an <see cref="E:StardewModdingAPI.Events.TimeEvents.AfterDayStarted"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
        </member>
        <member name="M:StardewModdingAPI.Events.TimeEvents.InvokeTimeOfDayChanged(StardewModdingAPI.IMonitor,System.Int32,System.Int32)">
            <summary>Raise a <see cref="E:StardewModdingAPI.Events.TimeEvents.TimeOfDayChanged"/> event.</summary>
            <param name="monitor">Encapsulates monitoring and logging.</param>
            <param name="priorTime">The previous time in military time format (e.g. 6:00pm is 1800).</param>
            <param name="newTime">The current time in military time format (e.g. 6:10pm is 1810).</param>
        </member>
        <member name="T:StardewModdingAPI.Events.ChangeType">
            <summary>Indicates how an inventory item changed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.ChangeType.Removed">
            <summary>The entire stack was removed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.ChangeType.Added">
            <summary>The entire stack was added.</summary>
        </member>
        <member name="F:StardewModdingAPI.Events.ChangeType.StackChange">
            <summary>The stack size changed.</summary>
        </member>
        <member name="T:StardewModdingAPI.Events.ItemStackChange">
            <summary>Represents an inventory slot that changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ItemStackChange.Item">
            <summary>The item in the slot.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ItemStackChange.StackChange">
            <summary>The amount by which the item's stack size changed.</summary>
        </member>
        <member name="P:StardewModdingAPI.Events.ItemStackChange.ChangeType">
            <summary>How the inventory slot changed.</summary>
        </member>
        <member name="T:StardewModdingAPI.Constants">
            <summary>Contains SMAPI's constants and assumptions.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.RawSavePath">
            <summary>The directory path containing the current save's data (if a save is loaded).</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.SavePathReady">
            <summary>Whether the directory containing the current save's data exists on disk.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.ApiVersion">
            <summary>SMAPI's current semantic version.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.MinimumGameVersion">
            <summary>The minimum supported version of Stardew Valley.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.MaximumGameVersion">
            <summary>The maximum supported version of Stardew Valley.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.ExecutionPath">
            <summary>The path to the game folder.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.DataPath">
            <summary>The directory path containing Stardew Valley's app data.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.LogDir">
            <summary>The directory path in which error logs should be stored.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.SavesPath">
            <summary>The directory path where all saves are stored.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.SaveFolderName">
            <summary>The directory name containing the current save's data (if a save is loaded and the directory exists).</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.CurrentSavePath">
            <summary>The directory path containing the current save's data (if a save is loaded and the directory exists).</summary>
        </member>
        <member name="F:StardewModdingAPI.Constants.GitHubRepository">
            <summary>The GitHub repository to check for updates.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.ApiConfigPath">
            <summary>The file path for the SMAPI configuration file.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.DefaultLogPath">
            <summary>The file path to the log where the latest output should be saved.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.FatalCrashLog">
            <summary>A copy of the log leading up to the previous fatal crash, if any.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.FatalCrashMarker">
            <summary>The file path which stores a fatal crash message for the next run.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.ModPath">
            <summary>The full path to the folder containing mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.GameVersion">
            <summary>The game's current semantic version.</summary>
        </member>
        <member name="P:StardewModdingAPI.Constants.TargetPlatform">
            <summary>The target game platform.</summary>
        </member>
        <member name="F:StardewModdingAPI.Constants.VendorModUrls">
            <summary>Maps vendor keys (like <c>Nexus</c>) to their mod URL template (where <c>{0}</c> is the mod ID) during mod compatibility checks. This doesn't affect update checks, which defer to the remote web API.</summary>
        </member>
        <member name="M:StardewModdingAPI.Constants.GetAssemblyMap(StardewModdingAPI.Framework.ModLoading.Platform)">
            <summary>Get metadata for mapping assemblies to the current platform.</summary>
            <param name="targetPlatform">The target game platform.</param>
        </member>
        <member name="M:StardewModdingAPI.Constants.GetSaveFolderName">
            <summary>Get the name of a save directory for the current player.</summary>
        </member>
        <member name="M:StardewModdingAPI.Constants.GetGameVersion">
            <summary>Get the game's current version string.</summary>
        </member>
        <member name="T:StardewModdingAPI.Context">
            <summary>Provides information about the current game state.</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.IsWorldReady">
            <summary>Whether the player has loaded a save and the world has finished initialising.</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.IsPlayerFree">
            <summary>Whether <see cref="P:StardewModdingAPI.Context.IsWorldReady"/> is true and the player is free to act in the world (no menu is displayed, no cutscene is in progress, etc).</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.CanPlayerMove">
            <summary>Whether <see cref="P:StardewModdingAPI.Context.IsPlayerFree"/> is true and the player is free to move (e.g. not using a tool).</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.IsInDrawLoop">
            <summary>Whether the game is currently running the draw loop. This isn't relevant to most mods, since you should use <see cref="E:StardewModdingAPI.Events.GraphicsEvents.OnPostRenderEvent"/> to draw to the screen.</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.IsSaveLoaded">
            <summary>Whether a player save has been loaded.</summary>
        </member>
        <member name="P:StardewModdingAPI.Context.IsSaving">
            <summary>Whether the game is currently writing to the save file.</summary>
        </member>
        <member name="T:StardewModdingAPI.IAssetEditor">
            <summary>Edits matching content assets.</summary>
        </member>
        <member name="M:StardewModdingAPI.IAssetEditor.CanEdit``1(StardewModdingAPI.IAssetInfo)">
            <summary>Get whether this instance can edit the given asset.</summary>
            <param name="asset">Basic metadata about the asset being loaded.</param>
        </member>
        <member name="M:StardewModdingAPI.IAssetEditor.Edit``1(StardewModdingAPI.IAssetData)">
            <summary>Edit a matched asset.</summary>
            <param name="asset">A helper which encapsulates metadata about an asset and enables changes to it.</param>
        </member>
        <member name="T:StardewModdingAPI.IAssetInfo">
            <summary>Basic metadata for a content asset.</summary>
        </member>
        <member name="P:StardewModdingAPI.IAssetInfo.Locale">
            <summary>The content's locale code, if the content is localised.</summary>
        </member>
        <member name="P:StardewModdingAPI.IAssetInfo.AssetName">
            <summary>The normalised asset name being read. The format may change between platforms; see <see cref="M:StardewModdingAPI.IAssetInfo.AssetNameEquals(System.String)"/> to compare with a known path.</summary>
        </member>
        <member name="P:StardewModdingAPI.IAssetInfo.DataType">
            <summary>The content data type.</summary>
        </member>
        <member name="M:StardewModdingAPI.IAssetInfo.AssetNameEquals(System.String)">
            <summary>Get whether the asset name being loaded matches a given name after normalisation.</summary>
            <param name="path">The expected asset path, relative to the game's content folder and without the .xnb extension or locale suffix (like 'Data\ObjectInformation').</param>
        </member>
        <member name="T:StardewModdingAPI.IAssetLoader">
            <summary>Provides the initial version for matching assets loaded by the game. SMAPI will raise an error if two mods try to load the same asset; in most cases you should use <see cref="T:StardewModdingAPI.IAssetEditor"/> instead.</summary>
        </member>
        <member name="M:StardewModdingAPI.IAssetLoader.CanLoad``1(StardewModdingAPI.IAssetInfo)">
            <summary>Get whether this instance can load the initial version of the given asset.</summary>
            <param name="asset">Basic metadata about the asset being loaded.</param>
        </member>
        <member name="M:StardewModdingAPI.IAssetLoader.Load``1(StardewModdingAPI.IAssetInfo)">
            <summary>Load a matched asset.</summary>
            <param name="asset">Basic metadata about the asset being loaded.</param>
        </member>
        <member name="T:StardewModdingAPI.ICommandHelper">
            <summary>Provides an API for managing console commands.</summary>
        </member>
        <member name="M:StardewModdingAPI.ICommandHelper.Add(System.String,System.String,System.Action{System.String,System.String[]})">
            <summary>Add a console command.</summary>
            <param name="name">The command name, which the user must type to trigger it.</param>
            <param name="documentation">The human-readable documentation shown when the player runs the built-in 'help' command.</param>
            <param name="callback">The method to invoke when the command is triggered. This method is passed the command name and arguments submitted by the user.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="name"/> or <paramref name="callback"/> is null or empty.</exception>
            <exception cref="T:System.FormatException">The <paramref name="name"/> is not a valid format.</exception>
            <exception cref="T:System.ArgumentException">There's already a command with that name.</exception>
        </member>
        <member name="M:StardewModdingAPI.ICommandHelper.Trigger(System.String,System.String[])">
            <summary>Trigger a command.</summary>
            <param name="name">The command name.</param>
            <param name="arguments">The command arguments.</param>
            <returns>Returns whether a matching command was triggered.</returns>
        </member>
        <member name="T:StardewModdingAPI.IAssetData`1">
            <summary>Generic metadata and methods for a content asset being loaded.</summary>
            <typeparam name="TValue">The expected data type.</typeparam>
        </member>
        <member name="P:StardewModdingAPI.IAssetData`1.Data">
            <summary>The content data being read.</summary>
        </member>
        <member name="M:StardewModdingAPI.IAssetData`1.ReplaceWith(`0)">
            <summary>Replace the entire content value with the given value. This is generally not recommended, since it may break compatibility with other mods or different versions of the game.</summary>
            <param name="value">The new content value.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="value"/> is null.</exception>
            <exception cref="T:System.InvalidCastException">The <paramref name="value"/>'s type is not compatible with the loaded asset's type.</exception>
        </member>
        <member name="T:StardewModdingAPI.IAssetData">
            <summary>Generic metadata and methods for a content asset being loaded.</summary>
        </member>
        <member name="M:StardewModdingAPI.IAssetData.AsDictionary``2">
            <summary>Get a helper to manipulate the data as a dictionary.</summary>
            <typeparam name="TKey">The expected dictionary key.</typeparam>
            <typeparam name="TValue">The expected dictionary value.</typeparam>
            <exception cref="T:System.InvalidOperationException">The content being read isn't a dictionary.</exception>
        </member>
        <member name="M:StardewModdingAPI.IAssetData.AsImage">
            <summary>Get a helper to manipulate the data as an image.</summary>
            <exception cref="T:System.InvalidOperationException">The content being read isn't an image.</exception>
        </member>
        <member name="M:StardewModdingAPI.IAssetData.GetData``1">
            <summary>Get the data as a given type.</summary>
            <typeparam name="TData">The expected data type.</typeparam>
            <exception cref="T:System.InvalidCastException">The data can't be converted to <typeparamref name="TData"/>.</exception>
        </member>
        <member name="T:StardewModdingAPI.IAssetDataForDictionary`2">
            <summary>Encapsulates access and changes to dictionary content being read from a data file.</summary>
        </member>
        <member name="M:StardewModdingAPI.IAssetDataForDictionary`2.Set(`0,`1)">
            <summary>Add or replace an entry in the dictionary.</summary>
            <param name="key">The entry key.</param>
            <param name="value">The entry value.</param>
        </member>
        <member name="M:StardewModdingAPI.IAssetDataForDictionary`2.Set(`0,System.Func{`1,`1})">
            <summary>Add or replace an entry in the dictionary.</summary>
            <param name="key">The entry key.</param>
            <param name="value">A callback which accepts the current value and returns the new value.</param>
        </member>
        <member name="M:StardewModdingAPI.IAssetDataForDictionary`2.Set(System.Func{`0,`1,`1})">
            <summary>Dynamically replace values in the dictionary.</summary>
            <param name="replacer">A lambda which takes the current key and value for an entry, and returns the new value.</param>
        </member>
        <member name="T:StardewModdingAPI.IAssetDataForImage">
            <summary>Encapsulates access and changes to dictionary content being read from a data file.</summary>
        </member>
        <member name="M:StardewModdingAPI.IAssetDataForImage.PatchImage(Microsoft.Xna.Framework.Graphics.Texture2D,System.Nullable{Microsoft.Xna.Framework.Rectangle},System.Nullable{Microsoft.Xna.Framework.Rectangle},StardewModdingAPI.PatchMode)">
            <summary>Overwrite part of the image.</summary>
            <param name="source">The image to patch into the content.</param>
            <param name="sourceArea">The part of the <paramref name="source"/> to copy (or <c>null</c> to take the whole texture). This must be within the bounds of the <paramref name="source"/> texture.</param>
            <param name="targetArea">The part of the content to patch (or <c>null</c> to patch the whole texture). The original content within this area will be erased. This must be within the bounds of the existing spritesheet.</param>
            <param name="patchMode">Indicates how an image should be patched.</param>
            <exception cref="T:System.ArgumentNullException">One of the arguments is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The <paramref name="targetArea"/> is outside the bounds of the spritesheet.</exception>
            <exception cref="T:System.InvalidOperationException">The content being read isn't an image.</exception>
        </member>
        <member name="T:StardewModdingAPI.IContentHelper">
            <summary>Provides an API for loading content assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.IContentHelper.AssetLoaders">
            <summary>Interceptors which provide the initial versions of matching content assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.IContentHelper.AssetEditors">
            <summary>Interceptors which edit matching content assets after they're loaded.</summary>
        </member>
        <member name="P:StardewModdingAPI.IContentHelper.CurrentLocale">
            <summary>The game's current locale code (like <c>pt-BR</c>).</summary>
        </member>
        <member name="P:StardewModdingAPI.IContentHelper.CurrentLocaleConstant">
            <summary>The game's current locale as an enum value.</summary>
        </member>
        <member name="M:StardewModdingAPI.IContentHelper.Load``1(System.String,StardewModdingAPI.ContentSource)">
            <summary>Load content from the game folder or mod folder (if not already cached), and return it. When loading a <c>.png</c> file, this must be called outside the game's draw loop.</summary>
            <typeparam name="T">The expected data type. The main supported types are <see cref="T:xTile.Map"/>, <see cref="T:Microsoft.Xna.Framework.Graphics.Texture2D"/>, and dictionaries; other types may be supported by the game's content pipeline.</typeparam>
            <param name="key">The asset key to fetch (if the <paramref name="source"/> is <see cref="F:StardewModdingAPI.ContentSource.GameContent"/>), or the local path to a content file relative to the mod folder.</param>
            <param name="source">Where to search for a matching content asset.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
            <exception cref="T:Microsoft.Xna.Framework.Content.ContentLoadException">The content asset couldn't be loaded (e.g. because it doesn't exist).</exception>
        </member>
        <member name="M:StardewModdingAPI.IContentHelper.GetActualAssetKey(System.String,StardewModdingAPI.ContentSource)">
            <summary>Get the underlying key in the game's content cache for an asset. This can be used to load custom map tilesheets, but should be avoided when you can use the content API instead. This does not validate whether the asset exists.</summary>
            <param name="key">The asset key to fetch (if the <paramref name="source"/> is <see cref="F:StardewModdingAPI.ContentSource.GameContent"/>), or the local path to a content file relative to the mod folder.</param>
            <param name="source">Where to search for a matching content asset.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
        </member>
        <member name="M:StardewModdingAPI.IContentHelper.InvalidateCache(System.String)">
            <summary>Remove an asset from the content cache so it's reloaded on the next request. This will reload core game assets if needed, but references to the former asset will still show the previous content.</summary>
            <param name="key">The asset key to invalidate in the content folder.</param>
            <exception cref="T:System.ArgumentException">The <paramref name="key"/> is empty or contains invalid characters.</exception>
            <returns>Returns whether the given asset key was cached.</returns>
        </member>
        <member name="M:StardewModdingAPI.IContentHelper.InvalidateCache``1">
            <summary>Remove all assets of the given type from the cache so they're reloaded on the next request. <b>This can be a very expensive operation and should only be used in very specific cases.</b> This will reload core game assets if needed, but references to the former assets will still show the previous content.</summary>
            <typeparam name="T">The asset type to remove from the cache.</typeparam>
            <returns>Returns whether any assets were invalidated.</returns>
        </member>
        <member name="M:StardewModdingAPI.IContentHelper.InvalidateCache(System.Func{StardewModdingAPI.IAssetInfo,System.Boolean})">
            <summary>Remove matching assets from the content cache so they're reloaded on the next request. This will reload core game assets if needed, but references to the former asset will still show the previous content.</summary>
            <param name="predicate">A predicate matching the assets to invalidate.</param>
            <returns>Returns whether any cache entries were invalidated.</returns>
        </member>
        <member name="T:StardewModdingAPI.IManifestDependency">
            <summary>A mod dependency listed in a mod manifest.</summary>
        </member>
        <member name="P:StardewModdingAPI.IManifestDependency.UniqueID">
            <summary>The unique mod ID to require.</summary>
        </member>
        <member name="P:StardewModdingAPI.IManifestDependency.MinimumVersion">
            <summary>The minimum required version (if any).</summary>
        </member>
        <member name="P:StardewModdingAPI.IManifestDependency.IsRequired">
            <summary>Whether the dependency must be installed to use the mod.</summary>
        </member>
        <member name="T:StardewModdingAPI.IModRegistry">
            <summary>Provides an API for fetching metadata about loaded mods.</summary>
        </member>
        <member name="M:StardewModdingAPI.IModRegistry.GetAll">
            <summary>Get metadata for all loaded mods.</summary>
        </member>
        <member name="M:StardewModdingAPI.IModRegistry.Get(System.String)">
            <summary>Get metadata for a loaded mod.</summary>
            <param name="uniqueID">The mod's unique ID.</param>
            <returns>Returns the matching mod's metadata, or <c>null</c> if not found.</returns>
        </member>
        <member name="M:StardewModdingAPI.IModRegistry.IsLoaded(System.String)">
            <summary>Get whether a mod has been loaded.</summary>
            <param name="uniqueID">The mod's unique ID.</param>
        </member>
        <member name="T:StardewModdingAPI.IManifest">
            <summary>A manifest which describes a mod for SMAPI.</summary>
        </member>
        <member name="P:StardewModdingAPI.IManifest.Name">
            <summary>The mod name.</summary>
        </member>
        <member name="P:StardewModdingAPI.IManifest.Description">
            <summary>A brief description of the mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.IManifest.Author">
            <summary>The mod author's name.</summary>
        </member>
        <member name="P:StardewModdingAPI.IManifest.Version">
            <summary>The mod version.</summary>
        </member>
        <member name="P:StardewModdingAPI.IManifest.MinimumApiVersion">
            <summary>The minimum SMAPI version required by this mod, if any.</summary>
        </member>
        <member name="P:StardewModdingAPI.IManifest.UniqueID">
            <summary>The unique mod ID.</summary>
        </member>
        <member name="P:StardewModdingAPI.IManifest.EntryDll">
            <summary>The name of the DLL in the directory that has the <see cref="M:StardewModdingAPI.IMod.Entry(StardewModdingAPI.IModHelper)"/> method.</summary>
        </member>
        <member name="P:StardewModdingAPI.IManifest.Dependencies">
            <summary>The other mods that must be loaded before this mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.IManifest.UpdateKeys">
            <summary>The namespaced mod IDs to query for updates (like <c>Nexus:541</c>).</summary>
        </member>
        <member name="P:StardewModdingAPI.IManifest.ExtraFields">
            <summary>Any manifest fields which didn't match a valid field.</summary>
        </member>
        <member name="T:StardewModdingAPI.IMod">
            <summary>The implementation for a Stardew Valley mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMod.Helper">
            <summary>Provides simplified APIs for writing mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMod.Monitor">
            <summary>Writes messages to the console and log file.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMod.ModManifest">
            <summary>The mod's manifest.</summary>
        </member>
        <member name="M:StardewModdingAPI.IMod.Entry(StardewModdingAPI.IModHelper)">
            <summary>The mod entry point, called after the mod is first loaded.</summary>
            <param name="helper">Provides simplified APIs for writing mods.</param>
        </member>
        <member name="T:StardewModdingAPI.IModHelper">
            <summary>Provides simplified APIs for writing mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.DirectoryPath">
            <summary>The full path to the mod's folder.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.Content">
            <summary>An API for loading content assets.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.Reflection">
            <summary>Simplifies access to private game code.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.ModRegistry">
            <summary>Metadata about loaded mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.ConsoleCommands">
            <summary>An API for managing console commands.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModHelper.Translation">
            <summary>Provides translations stored in the mod's <c>i18n</c> folder, with one file per locale (like <c>en.json</c>) containing a flat key => value structure. Translations are fetched with locale fallback, so missing translations are filled in from broader locales (like <c>pt-BR.json</c> &lt; <c>pt.json</c> &lt; <c>default.json</c>).</summary>
        </member>
        <member name="M:StardewModdingAPI.IModHelper.ReadConfig``1">
            <summary>Read the mod's configuration file (and create it if needed).</summary>
            <typeparam name="TConfig">The config class type. This should be a plain class that has public properties for the settings you want. These can be complex types.</typeparam>
        </member>
        <member name="M:StardewModdingAPI.IModHelper.WriteConfig``1(``0)">
            <summary>Save to the mod's configuration file.</summary>
            <typeparam name="TConfig">The config class type.</typeparam>
            <param name="config">The config settings to save.</param>
        </member>
        <member name="M:StardewModdingAPI.IModHelper.ReadJsonFile``1(System.String)">
            <summary>Read a JSON file.</summary>
            <typeparam name="TModel">The model type.</typeparam>
            <param name="path">The file path relative to the mod directory.</param>
            <returns>Returns the deserialised model, or <c>null</c> if the file doesn't exist or is empty.</returns>
        </member>
        <member name="M:StardewModdingAPI.IModHelper.WriteJsonFile``1(System.String,``0)">
            <summary>Save to a JSON file.</summary>
            <typeparam name="TModel">The model type.</typeparam>
            <param name="path">The file path relative to the mod directory.</param>
            <param name="model">The model to save.</param>
        </member>
        <member name="T:StardewModdingAPI.IModLinked">
            <summary>An instance linked to a mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.IModLinked.ModID">
            <summary>The unique ID of the mod for which the instance was created.</summary>
        </member>
        <member name="T:StardewModdingAPI.IPrivateProperty`1">
            <summary>A private property obtained through reflection.</summary>
            <typeparam name="TValue">The property value type.</typeparam>
        </member>
        <member name="P:StardewModdingAPI.IPrivateProperty`1.PropertyInfo">
            <summary>The reflection metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.IPrivateProperty`1.GetValue">
            <summary>Get the property value.</summary>
        </member>
        <member name="M:StardewModdingAPI.IPrivateProperty`1.SetValue(`0)">
            <summary>Set the property value.</summary>
        </member>
        <member name="T:StardewModdingAPI.ISemanticVersion">
            <summary>A semantic version with an optional release tag.</summary>
        </member>
        <member name="P:StardewModdingAPI.ISemanticVersion.MajorVersion">
            <summary>The major version incremented for major API changes.</summary>
        </member>
        <member name="P:StardewModdingAPI.ISemanticVersion.MinorVersion">
            <summary>The minor version incremented for backwards-compatible changes.</summary>
        </member>
        <member name="P:StardewModdingAPI.ISemanticVersion.PatchVersion">
            <summary>The patch version for backwards-compatible bug fixes.</summary>
        </member>
        <member name="P:StardewModdingAPI.ISemanticVersion.Build">
            <summary>An optional build tag.</summary>
        </member>
        <member name="M:StardewModdingAPI.ISemanticVersion.IsOlderThan(StardewModdingAPI.ISemanticVersion)">
            <summary>Get whether this version is older than the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
        </member>
        <member name="M:StardewModdingAPI.ISemanticVersion.IsOlderThan(System.String)">
            <summary>Get whether this version is older than the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
            <exception cref="T:System.FormatException">The specified version is not a valid semantic version.</exception>
        </member>
        <member name="M:StardewModdingAPI.ISemanticVersion.IsNewerThan(StardewModdingAPI.ISemanticVersion)">
            <summary>Get whether this version is newer than the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
        </member>
        <member name="M:StardewModdingAPI.ISemanticVersion.IsNewerThan(System.String)">
            <summary>Get whether this version is newer than the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
            <exception cref="T:System.FormatException">The specified version is not a valid semantic version.</exception>
        </member>
        <member name="M:StardewModdingAPI.ISemanticVersion.IsBetween(StardewModdingAPI.ISemanticVersion,StardewModdingAPI.ISemanticVersion)">
            <summary>Get whether this version is between two specified versions (inclusively).</summary>
            <param name="min">The minimum version.</param>
            <param name="max">The maximum version.</param>
        </member>
        <member name="M:StardewModdingAPI.ISemanticVersion.IsBetween(System.String,System.String)">
            <summary>Get whether this version is between two specified versions (inclusively).</summary>
            <param name="min">The minimum version.</param>
            <param name="max">The maximum version.</param>
            <exception cref="T:System.FormatException">One of the specified versions is not a valid semantic version.</exception>
        </member>
        <member name="M:StardewModdingAPI.ISemanticVersion.ToString">
            <summary>Get a string representation of the version.</summary>
        </member>
        <member name="T:StardewModdingAPI.ITranslationHelper">
            <summary>Provides translations stored in the mod's <c>i18n</c> folder, with one file per locale (like <c>en.json</c>) containing a flat key => value structure. Translations are fetched with locale fallback, so missing translations are filled in from broader locales (like <c>pt-BR.json</c> &lt; <c>pt.json</c> &lt; <c>default.json</c>).</summary>
        </member>
        <member name="P:StardewModdingAPI.ITranslationHelper.Locale">
            <summary>The current locale.</summary>
        </member>
        <member name="P:StardewModdingAPI.ITranslationHelper.LocaleEnum">
            <summary>The game's current language code.</summary>
        </member>
        <member name="M:StardewModdingAPI.ITranslationHelper.GetTranslations">
            <summary>Get all translations for the current locale.</summary>
        </member>
        <member name="M:StardewModdingAPI.ITranslationHelper.Get(System.String)">
            <summary>Get a translation for the current locale.</summary>
            <param name="key">The translation key.</param>
        </member>
        <member name="M:StardewModdingAPI.ITranslationHelper.Get(System.String,System.Object)">
            <summary>Get a translation for the current locale.</summary>
            <param name="key">The translation key.</param>
            <param name="tokens">An object containing token key/value pairs. This can be an anonymous object (like <c>new { value = 42, name = "Cranberries" }</c>), a dictionary, or a class instance.</param>
        </member>
        <member name="T:StardewModdingAPI.LogLevel">
            <summary>The log severity levels.</summary>
        </member>
        <member name="F:StardewModdingAPI.LogLevel.Trace">
            <summary>Tracing info intended for developers.</summary>
        </member>
        <member name="F:StardewModdingAPI.LogLevel.Debug">
            <summary>Troubleshooting info that may be relevant to the player.</summary>
        </member>
        <member name="F:StardewModdingAPI.LogLevel.Info">
            <summary>Info relevant to the player. This should be used judiciously.</summary>
        </member>
        <member name="F:StardewModdingAPI.LogLevel.Warn">
            <summary>An issue the player should be aware of. This should be used rarely.</summary>
        </member>
        <member name="F:StardewModdingAPI.LogLevel.Error">
            <summary>A message indicating something went wrong.</summary>
        </member>
        <member name="F:StardewModdingAPI.LogLevel.Alert">
            <summary>Important information to highlight for the player when player action is needed (e.g. new version available). This should be used rarely to avoid alert fatigue.</summary>
        </member>
        <member name="T:StardewModdingAPI.IMonitor">
            <summary>Encapsulates monitoring and logging for a given module.</summary>
        </member>
        <member name="P:StardewModdingAPI.IMonitor.IsExiting">
            <summary>Whether SMAPI is aborting. Mods don't need to worry about this unless they have background tasks.</summary>
        </member>
        <member name="M:StardewModdingAPI.IMonitor.Log(System.String,StardewModdingAPI.LogLevel)">
            <summary>Log a message for the player or developer.</summary>
            <param name="message">The message to log.</param>
            <param name="level">The log severity level.</param>
        </member>
        <member name="M:StardewModdingAPI.IMonitor.ExitGameImmediately(System.String)">
            <summary>Immediately exit the game without saving. This should only be invoked when an irrecoverable fatal error happens that risks save corruption or game-breaking bugs.</summary>
            <param name="reason">The reason for the shutdown.</param>
        </member>
        <member name="T:StardewModdingAPI.Mod">
            <summary>The base class for a mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Mod.Helper">
            <summary>Provides simplified APIs for writing mods.</summary>
        </member>
        <member name="P:StardewModdingAPI.Mod.Monitor">
            <summary>Writes messages to the console and log file.</summary>
        </member>
        <member name="P:StardewModdingAPI.Mod.ModManifest">
            <summary>The mod's manifest.</summary>
        </member>
        <member name="M:StardewModdingAPI.Mod.Entry(StardewModdingAPI.IModHelper)">
            <summary>The mod entry point, called after the mod is first loaded.</summary>
            <param name="helper">Provides simplified APIs for writing mods.</param>
        </member>
        <member name="M:StardewModdingAPI.Mod.Dispose">
            <summary>Release or reset unmanaged resources.</summary>
        </member>
        <member name="M:StardewModdingAPI.Mod.Dispose(System.Boolean)">
            <summary>Release or reset unmanaged resources when the game exits. There's no guarantee this will be called on every exit.</summary>
            <param name="disposing">Whether the instance is being disposed explicitly rather than finalised. If this is false, the instance shouldn't dispose other objects since they may already be finalised.</param>
        </member>
        <member name="M:StardewModdingAPI.Mod.Finalize">
            <summary>Destruct the instance.</summary>
        </member>
        <member name="T:StardewModdingAPI.PatchMode">
            <summary>Indicates how an image should be patched.</summary>
        </member>
        <member name="F:StardewModdingAPI.PatchMode.Replace">
            <summary>Erase the original content within the area before drawing the new content.</summary>
        </member>
        <member name="F:StardewModdingAPI.PatchMode.Overlay">
            <summary>Draw the new content over the original content, so the original content shows through any transparent pixels.</summary>
        </member>
        <member name="T:StardewModdingAPI.Program">
            <summary>The main entry point for SMAPI, responsible for hooking into and launching the game.</summary>
        </member>
        <member name="F:StardewModdingAPI.Program.LogFile">
            <summary>The log file to which to write messages.</summary>
        </member>
        <member name="F:StardewModdingAPI.Program.ConsoleManager">
            <summary>Manages console output interception.</summary>
        </member>
        <member name="F:StardewModdingAPI.Program.Monitor">
            <summary>The core logger and monitor for SMAPI.</summary>
        </member>
        <member name="F:StardewModdingAPI.Program.CancellationTokenSource">
            <summary>Tracks whether the game should exit immediately and any pending initialisation should be cancelled.</summary>
        </member>
        <member name="F:StardewModdingAPI.Program.Reflection">
            <summary>Simplifies access to private game code.</summary>
        </member>
        <member name="F:StardewModdingAPI.Program.GameInstance">
            <summary>The underlying game instance.</summary>
        </member>
        <member name="P:StardewModdingAPI.Program.ContentManager">
            <summary>The underlying content manager.</summary>
        </member>
        <member name="F:StardewModdingAPI.Program.Settings">
            <summary>The SMAPI configuration settings.</summary>
            <remarks>This is initialised after the game starts.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Program.ModRegistry">
            <summary>Tracks the installed mods.</summary>
            <remarks>This is initialised after the game starts.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Program.DeprecationManager">
            <summary>Manages deprecation warnings.</summary>
            <remarks>This is initialised after the game starts.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Program.CommandManager">
            <summary>Manages console commands.</summary>
            <remarks>This is initialised after the game starts.</remarks>
        </member>
        <member name="F:StardewModdingAPI.Program.IsGameRunning">
            <summary>Whether the game is currently running.</summary>
        </member>
        <member name="F:StardewModdingAPI.Program.IsDisposed">
            <summary>Whether the program has been disposed.</summary>
        </member>
        <member name="F:StardewModdingAPI.Program.SuppressConsolePatterns">
            <summary>Regex patterns which match console messages to suppress from the console and log.</summary>
        </member>
        <member name="M:StardewModdingAPI.Program.Main(System.String[])">
            <summary>The main entry point which hooks into and launches the game.</summary>
            <param name="args">The command-line arguments.</param>
        </member>
        <member name="M:StardewModdingAPI.Program.#ctor(System.Boolean,System.String)">
            <summary>Construct an instance.</summary>
            <param name="writeToConsole">Whether to output log messages to the console.</param>
            <param name="logPath">The full file path to which to write log messages.</param>
        </member>
        <member name="M:StardewModdingAPI.Program.RunInteractively">
            <summary>Launch SMAPI.</summary>
        </member>
        <member name="M:StardewModdingAPI.Program.Dispose">
            <summary>Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.</summary>
        </member>
        <member name="M:StardewModdingAPI.Program.AssertMinimumCompatibility">
            <summary>Assert that the minimum conditions are present to initialise SMAPI without type load exceptions.</summary>
        </member>
        <member name="M:StardewModdingAPI.Program.InitialiseAfterGameStart">
            <summary>Initialise SMAPI and mods after the game starts.</summary>
        </member>
        <member name="M:StardewModdingAPI.Program.OnLocaleChanged">
            <summary>Handle the game changing locale.</summary>
        </member>
        <member name="M:StardewModdingAPI.Program.RunConsoleLoop">
            <summary>Run a loop handling console input.</summary>
        </member>
        <member name="M:StardewModdingAPI.Program.ValidateContentIntegrity">
            <summary>Look for common issues with the game's XNB content, and log warnings if anything looks broken or outdated.</summary>
            <returns>Returns whether all integrity checks passed.</returns>
        </member>
        <member name="M:StardewModdingAPI.Program.CheckForUpdatesAsync(StardewModdingAPI.Framework.IModMetadata[])">
            <summary>Asynchronously check for a new version of SMAPI and any installed mods, and print alerts to the console if an update is available.</summary>
            <param name="mods">The mods to include in the update check (if eligible).</param>
        </member>
        <member name="M:StardewModdingAPI.Program.VerifyPath(System.String)">
            <summary>Create a directory path if it doesn't exist.</summary>
            <param name="path">The directory path.</param>
        </member>
        <member name="M:StardewModdingAPI.Program.LoadMods(StardewModdingAPI.Framework.IModMetadata[],StardewModdingAPI.Framework.Serialisation.JsonHelper,StardewModdingAPI.Framework.SContentManager)">
            <summary>Load and hook up the given mods.</summary>
            <param name="mods">The mods to load.</param>
            <param name="jsonHelper">The JSON helper with which to read mods' JSON files.</param>
            <param name="contentManager">The content manager to use for mod content.</param>
        </member>
        <member name="M:StardewModdingAPI.Program.ReloadTranslations">
            <summary>Reload translations for all mods.</summary>
        </member>
        <member name="M:StardewModdingAPI.Program.HandleCommand(System.String,System.String[])">
            <summary>The method called when the user submits a core SMAPI command in the console.</summary>
            <param name="name">The command name.</param>
            <param name="arguments">The command arguments.</param>
        </member>
        <member name="M:StardewModdingAPI.Program.HandleConsoleMessage(StardewModdingAPI.IMonitor,System.String)">
            <summary>Redirect messages logged directly to the console to the given monitor.</summary>
            <param name="monitor">The monitor with which to log messages.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:StardewModdingAPI.Program.PressAnyKeyToExit">
            <summary>Show a 'press any key to exit' message, and exit when they press a key.</summary>
        </member>
        <member name="M:StardewModdingAPI.Program.PressAnyKeyToExit(System.Boolean)">
            <summary>Show a 'press any key to exit' message, and exit when they press a key.</summary>
            <param name="showMessage">Whether to print a 'press any key to exit' message to the console.</param>
        </member>
        <member name="M:StardewModdingAPI.Program.GetSecondaryMonitor(System.String)">
            <summary>Get a monitor instance derived from SMAPI's current settings.</summary>
            <param name="name">The name of the module which will log messages with this instance.</param>
        </member>
        <member name="M:StardewModdingAPI.Program.GetFriendlyPlatformName">
            <summary>Get a human-readable name for the current platform.</summary>
        </member>
        <member name="M:StardewModdingAPI.Program.VerboseLog(System.String)">
            <summary>Log a message if verbose mode is enabled.</summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="T:StardewModdingAPI.IPrivateField`1">
            <summary>A private field obtained through reflection.</summary>
            <typeparam name="TValue">The field value type.</typeparam>
        </member>
        <member name="P:StardewModdingAPI.IPrivateField`1.FieldInfo">
            <summary>The reflection metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.IPrivateField`1.GetValue">
            <summary>Get the field value.</summary>
        </member>
        <member name="M:StardewModdingAPI.IPrivateField`1.SetValue(`0)">
            <summary>Set the field value.</summary>
        </member>
        <member name="T:StardewModdingAPI.IPrivateMethod">
            <summary>A private method obtained through reflection.</summary>
        </member>
        <member name="P:StardewModdingAPI.IPrivateMethod.MethodInfo">
            <summary>The reflection metadata.</summary>
        </member>
        <member name="M:StardewModdingAPI.IPrivateMethod.Invoke``1(System.Object[])">
            <summary>Invoke the method.</summary>
            <typeparam name="TValue">The return type.</typeparam>
            <param name="arguments">The method arguments to pass in.</param>
        </member>
        <member name="M:StardewModdingAPI.IPrivateMethod.Invoke(System.Object[])">
            <summary>Invoke the method.</summary>
            <param name="arguments">The method arguments to pass in.</param>
        </member>
        <member name="T:StardewModdingAPI.IReflectionHelper">
            <summary>Provides an API for accessing private game code.</summary>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetPrivateField``1(System.Object,System.String,System.Boolean)">
            <summary>Get a private instance field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="obj">The object which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetPrivateField``1(System.Type,System.String,System.Boolean)">
            <summary>Get a private static field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="type">The type which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetPrivateProperty``1(System.Object,System.String,System.Boolean)">
            <summary>Get a private instance property.</summary>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="obj">The object which has the property.</param>
            <param name="name">The property name.</param>
            <param name="required">Whether to throw an exception if the private property is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetPrivateProperty``1(System.Type,System.String,System.Boolean)">
            <summary>Get a private static property.</summary>
            <typeparam name="TValue">The property type.</typeparam>
            <param name="type">The type which has the property.</param>
            <param name="name">The property name.</param>
            <param name="required">Whether to throw an exception if the private property is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetPrivateValue``1(System.Object,System.String,System.Boolean)">
            <summary>Get the value of a private instance field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="obj">The object which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
            <remarks>This is a shortcut for <see cref="M:StardewModdingAPI.IReflectionHelper.GetPrivateField``1(System.Object,System.String,System.Boolean)"/> followed by <see cref="M:StardewModdingAPI.IPrivateField`1.GetValue"/>.</remarks>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetPrivateValue``1(System.Type,System.String,System.Boolean)">
            <summary>Get the value of a private static field.</summary>
            <typeparam name="TValue">The field type.</typeparam>
            <param name="type">The type which has the field.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
            <remarks>This is a shortcut for <see cref="M:StardewModdingAPI.IReflectionHelper.GetPrivateField``1(System.Type,System.String,System.Boolean)"/> followed by <see cref="M:StardewModdingAPI.IPrivateField`1.GetValue"/>.</remarks>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetPrivateMethod(System.Object,System.String,System.Boolean)">
            <summary>Get a private instance method.</summary>
            <param name="obj">The object which has the method.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="M:StardewModdingAPI.IReflectionHelper.GetPrivateMethod(System.Type,System.String,System.Boolean)">
            <summary>Get a private static method.</summary>
            <param name="type">The type which has the method.</param>
            <param name="name">The field name.</param>
            <param name="required">Whether to throw an exception if the private field is not found.</param>
        </member>
        <member name="T:StardewModdingAPI.SemanticVersion">
            <summary>A semantic version with an optional release tag.</summary>
        </member>
        <member name="F:StardewModdingAPI.SemanticVersion.Version">
            <summary>The underlying semantic version implementation.</summary>
        </member>
        <member name="P:StardewModdingAPI.SemanticVersion.MajorVersion">
            <summary>The major version incremented for major API changes.</summary>
        </member>
        <member name="P:StardewModdingAPI.SemanticVersion.MinorVersion">
            <summary>The minor version incremented for backwards-compatible changes.</summary>
        </member>
        <member name="P:StardewModdingAPI.SemanticVersion.PatchVersion">
            <summary>The patch version for backwards-compatible bug fixes.</summary>
        </member>
        <member name="P:StardewModdingAPI.SemanticVersion.Build">
            <summary>An optional build tag.</summary>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>Construct an instance.</summary>
            <param name="majorVersion">The major version incremented for major API changes.</param>
            <param name="minorVersion">The minor version incremented for backwards-compatible changes.</param>
            <param name="patchVersion">The patch version for backwards-compatible bug fixes.</param>
            <param name="build">An optional build tag.</param>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="version">The semantic version string.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="version"/> is null.</exception>
            <exception cref="T:System.FormatException">The <paramref name="version"/> is not a valid semantic version.</exception>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.#ctor(System.Version)">
            <summary>Construct an instance.</summary>
            <param name="version">The assembly version.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="version"/> is null.</exception>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.CompareTo(StardewModdingAPI.ISemanticVersion)">
            <summary>Get an integer indicating whether this version precedes (less than 0), supercedes (more than 0), or is equivalent to (0) the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="other"/> value is null.</exception>
            <remarks>The implementation is defined by Semantic Version 2.0 (http://semver.org/).</remarks>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.IsOlderThan(StardewModdingAPI.ISemanticVersion)">
            <summary>Get whether this version is older than the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.IsOlderThan(System.String)">
            <summary>Get whether this version is older than the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
            <exception cref="T:System.FormatException">The specified version is not a valid semantic version.</exception>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.IsNewerThan(StardewModdingAPI.ISemanticVersion)">
            <summary>Get whether this version is newer than the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.IsNewerThan(System.String)">
            <summary>Get whether this version is newer than the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
            <exception cref="T:System.FormatException">The specified version is not a valid semantic version.</exception>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.IsBetween(StardewModdingAPI.ISemanticVersion,StardewModdingAPI.ISemanticVersion)">
            <summary>Get whether this version is between two specified versions (inclusively).</summary>
            <param name="min">The minimum version.</param>
            <param name="max">The maximum version.</param>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.IsBetween(System.String,System.String)">
            <summary>Get whether this version is between two specified versions (inclusively).</summary>
            <param name="min">The minimum version.</param>
            <param name="max">The maximum version.</param>
            <exception cref="T:System.FormatException">One of the specified versions is not a valid semantic version.</exception>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.Equals(StardewModdingAPI.ISemanticVersion)">
            <summary>Indicates whether the current object is equal to another object of the same type.</summary>
            <returns>true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.</returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.ToString">
            <summary>Get a string representation of the version.</summary>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.TryParse(System.String,StardewModdingAPI.ISemanticVersion@)">
            <summary>Parse a version string without throwing an exception if it fails.</summary>
            <param name="version">The version string.</param>
            <param name="parsed">The parsed representation.</param>
            <returns>Returns whether parsing the version succeeded.</returns>
        </member>
        <member name="M:StardewModdingAPI.SemanticVersion.#ctor(StardewModdingAPI.Common.SemanticVersionImpl)">
            <summary>Construct an instance.</summary>
            <param name="version">The underlying semantic version implementation.</param>
        </member>
        <member name="T:StardewModdingAPI.Translation">
            <summary>A translation string with a fluent API to customise it.</summary>
        </member>
        <member name="F:StardewModdingAPI.Translation.PlaceholderText">
            <summary>The placeholder text when the translation is <c>null</c> or empty, where <c>{0}</c> is the translation key.</summary>
        </member>
        <member name="F:StardewModdingAPI.Translation.ModName">
            <summary>The name of the relevant mod for error messages.</summary>
        </member>
        <member name="F:StardewModdingAPI.Translation.Locale">
            <summary>The locale for which the translation was fetched.</summary>
        </member>
        <member name="F:StardewModdingAPI.Translation.Text">
            <summary>The underlying translation text.</summary>
        </member>
        <member name="F:StardewModdingAPI.Translation.Placeholder">
            <summary>The value to return if the translations is undefined.</summary>
        </member>
        <member name="P:StardewModdingAPI.Translation.Key">
            <summary>The original translation key.</summary>
        </member>
        <member name="M:StardewModdingAPI.Translation.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Construct an isntance.</summary>
            <param name="modName">The name of the relevant mod for error messages.</param>
            <param name="locale">The locale for which the translation was fetched.</param>
            <param name="key">The translation key.</param>
            <param name="text">The underlying translation text.</param>
        </member>
        <member name="M:StardewModdingAPI.Translation.#ctor(System.String,System.String,System.String,System.String,System.String)">
            <summary>Construct an isntance.</summary>
            <param name="modName">The name of the relevant mod for error messages.</param>
            <param name="locale">The locale for which the translation was fetched.</param>
            <param name="key">The translation key.</param>
            <param name="text">The underlying translation text.</param>
            <param name="placeholder">The value to return if the translations is undefined.</param>
        </member>
        <member name="M:StardewModdingAPI.Translation.Assert">
            <summary>Throw an exception if the translation text is <c>null</c> or empty.</summary>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">There's no available translation matching the requested key and locale.</exception>
        </member>
        <member name="M:StardewModdingAPI.Translation.Default(System.String)">
            <summary>Replace the text if it's <c>null</c> or empty. If you set a <c>null</c> or empty value, the translation will show the fallback "no translation" placeholder (see <see cref="M:StardewModdingAPI.Translation.UsePlaceholder(System.Boolean)"/> if you want to disable that). Returns a new instance if changed.</summary>
            <param name="default">The default value.</param>
        </member>
        <member name="M:StardewModdingAPI.Translation.UsePlaceholder(System.Boolean)">
            <summary>Whether to return a "no translation" placeholder if the translation is <c>null</c> or empty. Returns a new instance.</summary>
            <param name="use">Whether to return a placeholder.</param>
        </member>
        <member name="M:StardewModdingAPI.Translation.Tokens(System.Object)">
            <summary>Replace tokens in the text like <c>{{value}}</c> with the given values. Returns a new instance.</summary>
            <param name="tokens">An object containing token key/value pairs. This can be an anonymous object (like <c>new { value = 42, name = "Cranberries" }</c>), a dictionary, or a class instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="tokens"/> argument is <c>null</c>.</exception>
        </member>
        <member name="M:StardewModdingAPI.Translation.HasValue">
            <summary>Get whether the translation has a defined value.</summary>
        </member>
        <member name="M:StardewModdingAPI.Translation.ToString">
            <summary>Get the translation text. Calling this method isn't strictly necessary, since you can assign a <see cref="T:StardewModdingAPI.Translation"/> value directly to a string.</summary>
        </member>
        <member name="M:StardewModdingAPI.Translation.op_Implicit(StardewModdingAPI.Translation)~System.String">
            <summary>Get a string representation of the given translation.</summary>
            <param name="translation">The translation key.</param>
        </member>
        <member name="T:StardewModdingAPI.ICursorPosition">
            <summary>Represents a cursor position in the different coordinate systems.</summary>
        </member>
        <member name="P:StardewModdingAPI.ICursorPosition.ScreenPixels">
            <summary>The pixel position relative to the top-left corner of the visible screen.</summary>
        </member>
        <member name="P:StardewModdingAPI.ICursorPosition.Tile">
            <summary>The tile position under the cursor relative to the top-left corner of the map.</summary>
        </member>
        <member name="P:StardewModdingAPI.ICursorPosition.GrabTile">
            <summary>The tile position that the game considers under the cursor for purposes of clicking actions. This may be different than <see cref="P:StardewModdingAPI.ICursorPosition.Tile"/> if that's too far from the player.</summary>
        </member>
        <member name="T:StardewModdingAPI.Utilities.SDate">
            <summary>Represents a Stardew Valley date.</summary>
        </member>
        <member name="F:StardewModdingAPI.Utilities.SDate.Seasons">
            <summary>The internal season names in order.</summary>
        </member>
        <member name="P:StardewModdingAPI.Utilities.SDate.SeasonsInYear">
            <summary>The number of seasons in a year.</summary>
        </member>
        <member name="F:StardewModdingAPI.Utilities.SDate.DaysInSeason">
            <summary>The number of days in a season.</summary>
        </member>
        <member name="P:StardewModdingAPI.Utilities.SDate.Day">
            <summary>The day of month.</summary>
        </member>
        <member name="P:StardewModdingAPI.Utilities.SDate.Season">
            <summary>The season name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Utilities.SDate.Year">
            <summary>The year.</summary>
        </member>
        <member name="P:StardewModdingAPI.Utilities.SDate.DayOfWeek">
            <summary>The day of week.</summary>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.#ctor(System.Int32,System.String)">
            <summary>Construct an instance.</summary>
            <param name="day">The day of month.</param>
            <param name="season">The season name.</param>
            <exception cref="T:System.ArgumentException">One of the arguments has an invalid value (like day 35).</exception>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.#ctor(System.Int32,System.String,System.Int32)">
            <summary>Construct an instance.</summary>
            <param name="day">The day of month.</param>
            <param name="season">The season name.</param>
            <param name="year">The year.</param>
            <exception cref="T:System.ArgumentException">One of the arguments has an invalid value (like day 35).</exception>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.Now">
            <summary>Get the current in-game date.</summary>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.AddDays(System.Int32)">
            <summary>Get a new date with the given number of days added.</summary>
            <param name="offset">The number of days to add.</param>
            <returns>Returns the resulting date.</returns>
            <exception cref="T:System.ArithmeticException">The offset would result in an invalid date (like year 0).</exception>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.ToString">
            <summary>Get a string representation of the date. This is mainly intended for debugging or console messages.</summary>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.Equals(StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether this instance is equal to another.</summary>
            <param name="other">The other value to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.Equals(System.Object)">
            <summary>Get whether this instance is equal to another.</summary>
            <param name="obj">The other value to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.GetHashCode">
            <summary>Get a hash code which uniquely identifies a date.</summary>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.op_Equality(StardewModdingAPI.Utilities.SDate,StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether one date is equal to another.</summary>
            <param name="date">The base date to compare.</param>
            <param name="other">The other date to compare.</param>
            <returns>The equality of the dates</returns>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.op_Inequality(StardewModdingAPI.Utilities.SDate,StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether one date is not equal to another.</summary>
            <param name="date">The base date to compare.</param>
            <param name="other">The other date to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.op_GreaterThan(StardewModdingAPI.Utilities.SDate,StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether one date is more than another.</summary>
            <param name="date">The base date to compare.</param>
            <param name="other">The other date to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.op_GreaterThanOrEqual(StardewModdingAPI.Utilities.SDate,StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether one date is more than or equal to another.</summary>
            <param name="date">The base date to compare.</param>
            <param name="other">The other date to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.op_LessThanOrEqual(StardewModdingAPI.Utilities.SDate,StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether one date is less than or equal to another.</summary>
            <param name="date">The base date to compare.</param>
            <param name="other">The other date to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.op_LessThan(StardewModdingAPI.Utilities.SDate,StardewModdingAPI.Utilities.SDate)">
            <summary>Get whether one date is less than another.</summary>
            <param name="date">The base date to compare.</param>
            <param name="other">The other date to compare.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.#ctor(System.Int32,System.String,System.Int32,System.Boolean)">
            <summary>Construct an instance.</summary>
            <param name="day">The day of month.</param>
            <param name="season">The season name.</param>
            <param name="year">The year.</param>
            <param name="allowDayZero">Whether to allow 0 spring Y1 as a valid date.</param>
            <exception cref="T:System.ArgumentException">One of the arguments has an invalid value (like day 35).</exception>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.IsDayZero(System.Int32,System.String,System.Int32)">
            <summary>Get whether a date represents 0 spring Y1, which is the date during the in-game intro.</summary>
            <param name="day">The day of month.</param>
            <param name="season">The season name.</param>
            <param name="year">The year.</param>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.GetDayOfWeek">
            <summary>Get the day of week for the current date.</summary>
        </member>
        <member name="M:StardewModdingAPI.Utilities.SDate.GetSeasonIndex">
            <summary>Get the current season index.</summary>
            <exception cref="T:System.InvalidOperationException">The current season wasn't recognised.</exception>
        </member>
        <member name="T:StardewModdingAPI.SButton">
            <summary>A unified button constant which includes all controller, keyboard, and mouse buttons.</summary>
            <remarks>Derived from <see cref="T:Microsoft.Xna.Framework.Input.Keys"/>, <see cref="T:Microsoft.Xna.Framework.Input.Buttons"/>, and <see cref="T:System.Windows.Forms.MouseButtons"/>.</remarks>
        </member>
        <member name="F:StardewModdingAPI.SButton.None">
            <summary>No valid key.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MouseLeft">
            <summary>The left mouse button.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MouseRight">
            <summary>The right mouse button.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MouseMiddle">
            <summary>The middle mouse button.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MouseX1">
            <summary>The first mouse XButton.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MouseX2">
            <summary>The second mouse XButton.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ControllerA">
            <summary>The 'A' button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ControllerB">
            <summary>The 'B' button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ControllerX">
            <summary>The 'X' button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ControllerY">
            <summary>The 'Y' button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ControllerBack">
            <summary>The back button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ControllerStart">
            <summary>The start button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.DPadUp">
            <summary>The up button on the directional pad of a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.DPadDown">
            <summary>The down button on the directional pad of a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.DPadLeft">
            <summary>The left button on the directional pad of a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.DPadRight">
            <summary>The right button on the directional pad of a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftShoulder">
            <summary>The left bumper (shoulder) button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightShoulder">
            <summary>The right bumper (shoulder) button on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftTrigger">
            <summary>The left trigger on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightTrigger">
            <summary>The right trigger on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftStick">
            <summary>The left analog stick on a controller (when pressed).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightStick">
            <summary>The right analog stick on a controller (when pressed).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BigButton">
            <summary>The 'big button' on a controller.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftThumbstickLeft">
            <summary>The left analog stick on a controller (when pushed left).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftThumbstickRight">
            <summary>The left analog stick on a controller (when pushed right).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftThumbstickDown">
            <summary>The left analog stick on a controller (when pushed down).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftThumbstickUp">
            <summary>The left analog stick on a controller (when pushed up).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightThumbstickLeft">
            <summary>The right analog stick on a controller (when pushed left).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightThumbstickRight">
            <summary>The right analog stick on a controller (when pushed right).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightThumbstickDown">
            <summary>The right analog stick on a controller (when pushed down).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightThumbstickUp">
            <summary>The right analog stick on a controller (when pushed up).</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.A">
            <summary>The A button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Add">
            <summary>The Add button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Apps">
            <summary>The Applications button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Attn">
            <summary>The Attn button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.B">
            <summary>The B button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Back">
            <summary>The Backspace button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserBack">
            <summary>The Browser Back button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserFavorites">
            <summary>The Browser Favorites button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserForward">
            <summary>The Browser Favorites button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserHome">
            <summary>The Browser Home button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserRefresh">
            <summary>The Browser Refresh button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserSearch">
            <summary>The Browser Search button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.BrowserStop">
            <summary>The Browser Stop button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.C">
            <summary>The C button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.CapsLock">
            <summary>The Caps Lock button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ChatPadGreen">
            <summary>The Green ChatPad button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ChatPadOrange">
            <summary>The Orange ChatPad button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Crsel">
            <summary>The CrSel button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D">
            <summary>The D button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D0">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D1">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D2">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D3">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D4">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D5">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D6">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D7">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D8">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.D9">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Decimal">
            <summary>The Decimal button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Delete">
            <summary>The Delete button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Divide">
            <summary>The Divide button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Down">
            <summary>The Down arrow button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.E">
            <summary>The E button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.End">
            <summary>The End button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Enter">
            <summary>The Enter button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.EraseEof">
            <summary>The Erase EOF button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Escape">
            <summary>The Escape button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Execute">
            <summary>The Execute button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Exsel">
            <summary>The ExSel button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F">
            <summary>The F button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F1">
            <summary>The F1 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F10">
            <summary>The F10 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F11">
            <summary>The F11 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F12">
            <summary>The F12 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F13">
            <summary>The F13 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F14">
            <summary>The F14 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F15">
            <summary>The F15 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F16">
            <summary>The F16 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F17">
            <summary>The F17 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F18">
            <summary>The F18 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F19">
            <summary>The F19 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F2">
            <summary>The F2 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F20">
            <summary>The F20 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F21">
            <summary>The F21 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F22">
            <summary>The F22 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F23">
            <summary>The F23 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F24">
            <summary>The F24 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F3">
            <summary>The F3 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F4">
            <summary>The F4 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F5">
            <summary>The F5 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F6">
            <summary>The F6 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F7">
            <summary>The F7 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F8">
            <summary>The F8 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.F9">
            <summary>The F9 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.G">
            <summary>The G button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.H">
            <summary>The H button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Help">
            <summary>The Help button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Home">
            <summary>The Home button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.I">
            <summary>The I button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ImeConvert">
            <summary>The IME Convert button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ImeNoConvert">
            <summary>The IME NoConvert button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Insert">
            <summary>The INS button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.J">
            <summary>The J button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.K">
            <summary>The K button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Kana">
            <summary>The Kana button on a Japanese keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Kanji">
            <summary>The Kanji button on a Japanese keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.L">
            <summary>The L button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LaunchApplication1">
            <summary>The Start Applications 1 button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LaunchApplication2">
            <summary>The Start Applications 2 button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LaunchMail">
            <summary>The Start Mail button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Left">
            <summary>The Left arrow button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftAlt">
            <summary>The Left Alt button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftControl">
            <summary>The Left Control button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftShift">
            <summary>The Left Shift button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.LeftWindows">
            <summary>The Left Windows button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.M">
            <summary>The M button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MediaNextTrack">
            <summary>The MediaNextTrack button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MediaPlayPause">
            <summary>The MediaPlayPause button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MediaPreviousTrack">
            <summary>The MediaPreviousTrack button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.MediaStop">
            <summary>The MediaStop button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Multiply">
            <summary>The Multiply button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.N">
            <summary>The N button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumLock">
            <summary>The Num Lock button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad0">
            <summary>The Numeric keypad 0 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad1">
            <summary>The Numeric keypad 1 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad2">
            <summary>The Numeric keypad 2 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad3">
            <summary>The Numeric keypad 3 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad4">
            <summary>The Numeric keypad 4 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad5">
            <summary>The Numeric keypad 5 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad6">
            <summary>The Numeric keypad 6 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad7">
            <summary>The Numeric keypad 7 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad8">
            <summary>The Numeric keypad 8 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.NumPad9">
            <summary>The Numeric keypad 9 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.O">
            <summary>The O button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Oem8">
            <summary>A miscellaneous button on a keyboard; can vary by keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemAuto">
            <summary>The OEM Auto button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemBackslash">
            <summary>The OEM Angle Bracket or Backslash button on the RT 102 keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemClear">
            <summary>The Clear button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemCloseBrackets">
            <summary>The OEM Close Bracket button on a US standard keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemComma">
            <summary>The ',' button on a keyboard in any country/region in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemCopy">
            <summary>The OEM Copy button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemEnlW">
            <summary>The OEM Enlarge Window button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemMinus">
            <summary>The '-' button on a keyboard in any country/region in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemOpenBrackets">
            <summary>The OEM Open Bracket button on a US standard keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemPeriod">
            <summary>The '.' button on a keyboard in any country/region.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemPipe">
            <summary>The OEM Pipe button on a US standard keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemPlus">
            <summary>The '+' button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemQuestion">
            <summary>The OEM Question Mark button on a US standard keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemQuotes">
            <summary>The OEM Single/Double Quote button on a US standard keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemSemicolon">
            <summary>The OEM Semicolon button on a US standard keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.OemTilde">
            <summary>The OEM Tilde button on a US standard keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.P">
            <summary>The P button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Pa1">
            <summary>The PA1 button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.PageDown">
            <summary>The Page Down button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.PageUp">
            <summary>The Page Up button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Pause">
            <summary>The Pause button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Play">
            <summary>The Play button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Print">
            <summary>The Print button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.PrintScreen">
            <summary>The Print Screen button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.ProcessKey">
            <summary>The IME Process button on a keyboard in Windows 95/98/ME/NT 4.0/2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Q">
            <summary>The Q button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.R">
            <summary>The R button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Right">
            <summary>The Right Arrow button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightAlt">
            <summary>The Right Alt button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightControl">
            <summary>The Right Control button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightShift">
            <summary>The Right Shift button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.RightWindows">
            <summary>The Right Windows button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.S">
            <summary>The S button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Scroll">
            <summary>The Scroll Lock button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Select">
            <summary>The Select button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.SelectMedia">
            <summary>The Select Media button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Separator">
            <summary>The Separator button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Sleep">
            <summary>The Computer Sleep button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Space">
            <summary>The Space bar on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Subtract">
            <summary>The Subtract button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.T">
            <summary>The T button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Tab">
            <summary>The Tab button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.U">
            <summary>The U button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Up">
            <summary>The Up Arrow button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.V">
            <summary>The V button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.VolumeDown">
            <summary>The Volume Down button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.VolumeMute">
            <summary>The Volume Mute button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.VolumeUp">
            <summary>The Volume Up button on a keyboard in Windows 2000/XP.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.W">
            <summary>The W button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.X">
            <summary>The X button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Y">
            <summary>The Y button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Z">
            <summary>The Z button on a keyboard.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButton.Zoom">
            <summary>The Zoom button on a keyboard.</summary>
        </member>
        <member name="T:StardewModdingAPI.SButtonExtensions">
            <summary>Provides extension methods for <see cref="T:StardewModdingAPI.SButton"/>.</summary>
        </member>
        <member name="F:StardewModdingAPI.SButtonExtensions.ControllerOffset">
            <summary>The offset added to <see cref="T:Microsoft.Xna.Framework.Input.Buttons"/> values when converting them to <see cref="T:StardewModdingAPI.SButton"/> to avoid collisions with <see cref="T:Microsoft.Xna.Framework.Input.Keys"/> values.</summary>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.ToSButton(Microsoft.Xna.Framework.Input.Keys)">
            <summary>Get the <see cref="T:StardewModdingAPI.SButton"/> equivalent for the given button.</summary>
            <param name="key">The keyboard button to convert.</param>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.ToSButton(Microsoft.Xna.Framework.Input.Buttons)">
            <summary>Get the <see cref="T:StardewModdingAPI.SButton"/> equivalent for the given button.</summary>
            <param name="key">The controller button to convert.</param>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.ToSButton(StardewValley.InputButton)">
            <summary>Get the <see cref="T:StardewModdingAPI.SButton"/> equivalent for the given button.</summary>
            <param name="input">The Stardew Valley button to convert.</param>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.TryGetKeyboard(StardewModdingAPI.SButton,Microsoft.Xna.Framework.Input.Keys@)">
            <summary>Get the <see cref="T:Microsoft.Xna.Framework.Input.Keys"/> equivalent for the given button.</summary>
            <param name="input">The button to convert.</param>
            <param name="key">The keyboard equivalent.</param>
            <returns>Returns whether the value was converted successfully.</returns>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.TryGetController(StardewModdingAPI.SButton,Microsoft.Xna.Framework.Input.Buttons@)">
            <summary>Get the <see cref="T:Microsoft.Xna.Framework.Input.Buttons"/> equivalent for the given button.</summary>
            <param name="input">The button to convert.</param>
            <param name="button">The controller equivalent.</param>
            <returns>Returns whether the value was converted successfully.</returns>
        </member>
        <member name="M:StardewModdingAPI.SButtonExtensions.TryGetStardewInput(StardewModdingAPI.SButton,StardewValley.InputButton@)">
            <summary>Get the <see cref="T:StardewValley.InputButton"/> equivalent for the given button.</summary>
            <param name="input">The button to convert.</param>
            <param name="button">The Stardew Valley input button equivalent.</param>
            <returns>Returns whether the value was converted successfully.</returns>
        </member>
        <member name="T:StardewModdingAPI.Common.Models.ModSearchModel">
            <summary>Specifies mods whose update-check info to fetch.</summary>
        </member>
        <member name="P:StardewModdingAPI.Common.Models.ModSearchModel.ModKeys">
            <summary>The namespaced mod keys to search.</summary>
        </member>
        <member name="M:StardewModdingAPI.Common.Models.ModSearchModel.#ctor">
            <summary>Construct an empty instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Common.Models.ModSearchModel.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>Construct an instance.</summary>
            <param name="modKeys">The namespaced mod keys to search.</param>
        </member>
        <member name="T:StardewModdingAPI.Common.Models.ModInfoModel">
            <summary>Generic metadata about a mod.</summary>
        </member>
        <member name="P:StardewModdingAPI.Common.Models.ModInfoModel.Name">
            <summary>The mod name.</summary>
        </member>
        <member name="P:StardewModdingAPI.Common.Models.ModInfoModel.Version">
            <summary>The mod's semantic version number.</summary>
        </member>
        <member name="P:StardewModdingAPI.Common.Models.ModInfoModel.Url">
            <summary>The mod's web URL.</summary>
        </member>
        <member name="P:StardewModdingAPI.Common.Models.ModInfoModel.Error">
            <summary>The error message indicating why the mod is invalid (if applicable).</summary>
        </member>
        <member name="M:StardewModdingAPI.Common.Models.ModInfoModel.#ctor">
            <summary>Construct an empty instance.</summary>
        </member>
        <member name="M:StardewModdingAPI.Common.Models.ModInfoModel.#ctor(System.String,System.String,System.String,System.String)">
            <summary>Construct an instance.</summary>
            <param name="name">The mod name.</param>
            <param name="version">The mod's semantic version number.</param>
            <param name="url">The mod's web URL.</param>
            <param name="error">The error message indicating why the mod is invalid (if applicable).</param>
        </member>
        <member name="M:StardewModdingAPI.Common.Models.ModInfoModel.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="error">The error message indicating why the mod is invalid.</param>
        </member>
        <member name="T:StardewModdingAPI.Common.SemanticVersionImpl">
            <summary>A low-level implementation of a semantic version with an optional release tag.</summary>
            <remarks>The implementation is defined by Semantic Version 2.0 (http://semver.org/).</remarks>
        </member>
        <member name="P:StardewModdingAPI.Common.SemanticVersionImpl.Major">
            <summary>The major version incremented for major API changes.</summary>
        </member>
        <member name="P:StardewModdingAPI.Common.SemanticVersionImpl.Minor">
            <summary>The minor version incremented for backwards-compatible changes.</summary>
        </member>
        <member name="P:StardewModdingAPI.Common.SemanticVersionImpl.Patch">
            <summary>The patch version for backwards-compatible bug fixes.</summary>
        </member>
        <member name="P:StardewModdingAPI.Common.SemanticVersionImpl.Tag">
            <summary>An optional prerelease tag.</summary>
        </member>
        <member name="F:StardewModdingAPI.Common.SemanticVersionImpl.Regex">
            <summary>A regular expression matching a semantic version string.</summary>
            <remarks>
            This pattern is derived from the BNF documentation in the <a href="https://github.com/mojombo/semver">semver repo</a>,
            with three important deviations intended to support Stardew Valley mod conventions:
            - allows short-form "x.y" versions;
            - allows hyphens in prerelease tags as synonyms for dots (like "-unofficial-update.3");
            - doesn't allow '+build' suffixes.
            </remarks>
        </member>
        <member name="M:StardewModdingAPI.Common.SemanticVersionImpl.#ctor(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>Construct an instance.</summary>
            <param name="major">The major version incremented for major API changes.</param>
            <param name="minor">The minor version incremented for backwards-compatible changes.</param>
            <param name="patch">The patch version for backwards-compatible bug fixes.</param>
            <param name="tag">An optional prerelease tag.</param>
        </member>
        <member name="M:StardewModdingAPI.Common.SemanticVersionImpl.#ctor(System.Version)">
            <summary>Construct an instance.</summary>
            <param name="version">The assembly version.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="version"/> is null.</exception>
        </member>
        <member name="M:StardewModdingAPI.Common.SemanticVersionImpl.#ctor(System.String)">
            <summary>Construct an instance.</summary>
            <param name="version">The semantic version string.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="version"/> is null.</exception>
            <exception cref="T:System.FormatException">The <paramref name="version"/> is not a valid semantic version.</exception>
        </member>
        <member name="M:StardewModdingAPI.Common.SemanticVersionImpl.CompareTo(StardewModdingAPI.Common.SemanticVersionImpl)">
            <summary>Get an integer indicating whether this version precedes (less than 0), supercedes (more than 0), or is equivalent to (0) the specified version.</summary>
            <param name="other">The version to compare with this instance.</param>
            <exception cref="T:System.ArgumentNullException">The <paramref name="other"/> value is null.</exception>
        </member>
        <member name="M:StardewModdingAPI.Common.SemanticVersionImpl.CompareTo(System.Int32,System.Int32,System.Int32,System.String)">
            <summary>Get an integer indicating whether this version precedes (less than 0), supercedes (more than 0), or is equivalent to (0) the specified version.</summary>
            <param name="otherMajor">The major version to compare with this instance.</param>
            <param name="otherMinor">The minor version to compare with this instance.</param>
            <param name="otherPatch">The patch version to compare with this instance.</param>
            <param name="otherTag">The prerelease tag to compare with this instance.</param>
        </member>
        <member name="M:StardewModdingAPI.Common.SemanticVersionImpl.ToString">
            <summary>Get a string representation of the version.</summary>
        </member>
        <member name="M:StardewModdingAPI.Common.SemanticVersionImpl.TryParse(System.String,StardewModdingAPI.Common.SemanticVersionImpl@)">
            <summary>Parse a version string without throwing an exception if it fails.</summary>
            <param name="version">The version string.</param>
            <param name="parsed">The parsed representation.</param>
            <returns>Returns whether parsing the version succeeded.</returns>
        </member>
        <member name="M:StardewModdingAPI.Common.SemanticVersionImpl.GetNormalisedTag(System.String)">
            <summary>Get a normalised build tag.</summary>
            <param name="tag">The tag to normalise.</param>
        </member>
    </members>
</doc>
